;*************************************************************************
;
;		CONTROL DATA INFORMATION FOR THE GAME STATE MACHINE.
;
;THIS ASSEMBLY CONTAINS THE SOUNDS, POINT TABLES, MUSIC, AND CONTROL
;DATA TABLES FOR THE NES UNIVERSAL QUEST GAME STATE MACHINE.
;
;**************************************************************************

YCENTER		=	-40	;Y CENTERING VALUE FOR VISUAL SCREEN
SPCNTR		=	24	;SPRITE ADJUSTMENT AS A RESULT OF YCENTER.
STARTHEALTH	=	20	;AMOUNT OF HEALTH (1-20) GIVEN TO NEW HEROS.  ALSO
				;OK TO GO OVER 20 BUT IT WON'T DISPLAY ON BAR AS
ERASECHAR	=	$FA	;CHAR TO USE TO ERASE THINGS WITH
LIFECHAR	=	$FE	;LIFE FORCE CHAR.  USED WHEN BACKGROUND LIFE FORCE 

PERMADELAY	=	12*15 	;DELAY IN 1/15 SECOND INTERVALS BETWEEN PERMA LAUNCH
				;ENEMIES FROM SAME TARGET.  MINIMUM 1*15, MAX 17*15

;THIS TABLE OF CHAR VALUES MUST HAVE THE VALUES TO USE TO PAINT A LIFE FORCE
;BAR.  THE FIRST MUST BE AN EMPTY CHAR.  THE SECOND IS 1/2 SOLID ON THE
;BOTTOM SIDE. THE LAST IS FULL SOLID.  SOLID DOESN'T MEAN IT HAS TO BE
;VISUALLY SO.  THE LIFE FORCE BAR IS VERTICAL AND HEARTS CAN BE USED
;AS WELL AS SOLID BLOCKS.  FOR INSTANCE, YOU COULD HAVE THE FOLLOWING
;(ASSUME THE C CHARS ARE HEARTS:
;
;FIRST =
;
;SECOND = 
;	  C 
;THIRD  = C
;         C
;
;THESE WOULD STACK TOGETHER AS A COLUMN OF DROPPING HEARTS.
;
LIFETAB:	.byte 	$FA,$E6,$E5

;THIS SPRITE DEFFINITION IS USED TO MAKE THE LIFE FORCE (HEALTH) BAR ON
;THE UPPER RIGHT OF SCREEN.  IT IS ASSIGNED THE HIGHEST SPRITE NUMBERS
;SO THAT IT HAS THE LOWEST VISUAL PRIORITY.

LIFEBASE	=	59	;BASE SPRITE FOR THE LIFE BAR

LIFEBAR: .byte  LIFEBASE,$01,$05 ;BASE+$80 IF 1 BY 2, WIDTH, HEIGHT
.byte  $FA,$00
.byte  $FA,$00		
.byte  $FA,$00
.byte  $FA,$00
.byte  $FA,$00

;THIS TABLE IS USED TO GIVE A HORIZONTAL SWERVING MOVEMENT TO ENEMIES.
;IT HAS 16 ENTRIES.  EACH ENTRY IS APPLIED TO THE ENEMIES Y MOMENTUM
;4 TIMES.  THE FREQUENCY OF APPLICATION IS 1/15 SECOND.

SWERVING:			        
	.byte 	0,2,4,4,8,4,4,2	 
	.byte 	0,-2,-4,-4,-8,-4,-4,-2

;THIS TABLE SIMULATES A BIG HOP.  THERE ARE 16 ENTRIES.  THEY ARE TO BE
;APPLIED TO THE Y COMPONENT.
		
HOPPING:	  
	.byte 	8,4,4,4,2,2,1,0,-8,-4,-4,-4,-2,-2,-1,0

;THIS TABLE IS USED TO GIVE A CIRCULAR MOTION TO ENEMIES.  FORMAT: X,Y
;ITS ALSO SHARED BY SPECIAL GUNS AND NEEDS THE END NULL FOR THAT SHARING.

CIRCLING:	.byte 	1,-20
		.byte 	8,-16
		.byte 	12,-12
		.byte 	16,-8
		.byte 	20,-1
		.byte 	 16,8
		.byte 	 12,12
		.byte 	 8,16
		.byte 	-1,20
		.byte 	-8,16
		.byte 	-12,12
		.byte 	-16,8
	 	.byte 	-20,1
		.byte 	-16,-8
		.byte 	-12,-12
		.byte 	-8,-16
		.byte 	0

;THIS ANIMATION IS USED FOR BACKGROUND EXPLOSIONS SUCH AS THE BOMB COMMAND
;OR FOR WHEN ENEMIES DIE.  IT MUST BE AVAILABLE IN ALL SPRITE SETS.
;IT IS CURRENTLY ASSUMED 2 BY 2 AND VISUAL ADJUSTMENTS ARE MADE ACCORDINGLY.

EXPLODES: .byte  $53,$03,$0A ;4F=OBJECT/53=SPRITE, SCENES, FREQUENCY
.word 	EX1
.word 	EX2
.word 	EX3

EX1: .byte  $00,$02,$02 ;BASE+$80 IF 1 BY 2, WIDTH, HEIGHT
.byte  $E8,$00,$E8,$40	;NEW ROW
.byte  $E8,$80,$E8,$C0	;NEW ROW

EX2: .byte  $00,$02,$02 ;BASE+$80 IF 1 BY 2, WIDTH, HEIGHT
.byte  $E9,$00,$E9,$40	;NEW ROW
.byte  $E9,$80,$E9,$C0	;NEW ROW

EX3: .byte  $00,$02,$02 ;BASE+$80 IF 1 BY 2, WIDTH, HEIGHT
.byte  $EA,$00,$EA,$40	;NEW ROW
.byte  $EA,$80,$EA,$C0	;NEW ROW

;THIS SPRITE IS USED WITH THE FIRE WALL GUN COMMAND (34).

WALLSHOT:  .byte  $53,$02,$10 ;4F=OBJECT/53=SPRITE, SCENES, FREQUENCY
.word 	WS1
.word 	WS2

WS1: .byte  $01,$01,$01 ;BASE+$80 IF 1 BY 2, WIDTH, HEIGHT
.byte  $4E,$03	

WS2: .byte  $01,$01,$01 ;BASE+$80 IF 1 BY 2, WIDTH, HEIGHT
.byte  $4F,$03	


;THESE ANIMATIONS ARE USED WITH THE ELEVATOR AND DOOR COMMANDS.  THE DOORS
;SHOULD BE DRAWN IN THE BACKGROUND ALREADY CLOSED.  

ELEVTIME	=	2		;SET THIS TO 1/15 SECOND TICKS TO PAUSE
					;BETWEEN ANIMATION FRAMES.
					;TO OPEN OR CLOSE THE DOORS

;THIS TABLE IS USED TO SHUT THE DOORS.  IT IS A LIST OF POINTERS TO
;BLOCKS OF 4 BY 4.  THE LIST SHOULD END WITH A NULL.  A DELAY BETWEEN
;ANIMATIONS OF THAT SPECIFIED IN ELEVTIME WILL BE MADE.

SHUTDOOR: 
.word 	DOOR2
.word 	DOOR1
.word 	0

OPENDOOR: 
.word 	DOOR2
.word 	DOOR3
.word 	0

DOOR1:     
.byte  $80,$81,$80,$81	
.byte  $83,$82,$83,$82	;FULLY CLOSED DOORS
.byte  $84,$85,$84,$85	
.byte  $87,$86,$87,$86	

DOOR2:     
.byte  $81,$FA,$FA,$80	
.byte  $82,$FA,$FA,$83	;HALF OPEN
.byte  $85,$FA,$FA,$84	
.byte  $86,$FA,$FA,$87	

DOOR3:     
.byte  $FA,$FA,$FA,$FA	
.byte  $FA,$FA,$FA,$FA	;FULLY OPEN
.byte  $FA,$FA,$FA,$FA	
.byte  $FA,$FA,$FA,$FA	

;THESE ARE THE SECONDARY OPENING DOOR ANIMATIONS SUPPORTED BY THE DOOR 
;COMMANDS.

SHUTDR2:
.word 	DR2
.word 	DR1
.word 	0

OPENDR2:
.word 	DR2
.word 	DR3
.word 	0

DR1:     
.byte  $C3,$C3,$C3,$85	
.byte  $C3,$C3,$C3,$85	;FULLY CLOSED DOORS
.byte  $C3,$C3,$C4,$85	
.byte  $C3,$C3,$C3,$85	

DR2:     
.byte  $C3,$C3,$FA,$85	
.byte  $C3,$C3,$FA,$85	;HALF OPEN
.byte  $C3,$C4,$FA,$85	
.byte  $C3,$C3,$FA,$85	

DR3:     
.byte  $C3,$FA,$FA,$85	
.byte  $C3,$FA,$FA,$85	;FULLY OPEN
.byte  $C4,$FA,$FA,$85	
.byte  $C3,$FA,$FA,$85	

;THIS IS THE SONG PLAYED WHEN A FREE HERO IS AWARDED.

FREEHERO:
		.byte 	VOICE1,HIGH_PIANO
		.byte 	C+N8,G+N8,HC+N8,HC+N8,C+N8,C+N8,G+N8,HC+N8,ENDPLAY

;THIS IS THE SOUND USED WHEN AN ENEMY IS KILLED.

EXPLODE:	.byte 	VOICE3,LOADALL,$04,$F9,$3A,$35
		.byte 	PAUSE+N16,ENDPLAY

;THIS IS THE SOUND MADE WHEN THE MACHINE IS PAUSED.

DING:		.byte 	VOICE2,PIANO
		.byte 	E+N16,C+N16,E+N16,G+N16,ENDPLAY

;PRIZE_SND IS USED TO MAKE A SOUND WHEN A PRIZE OR HEALTH HIDDEN IN ENEMY
;IS AWARDED.

PRIZE_SND:
    	.byte 	VOICE3
	.byte 	LOADALL,$04,$00,$84,$08,PAUSE+N16
     	.byte 	LOADALL,$04,$00,$83,$08,PAUSE+N16
     	.byte 	LOADALL,$04,$00,$82,$08,PAUSE+N16
	.byte 	ENDPLAY

;THIS THE SOUND MADE FOR ALL EXPLODING ENEMY TYPES.

BOOM:
.byte 	VOICE3,LOADALL,$0F,$F4,$4E,$0F
.byte 	PAUSE+N2,ENDPLAY

;THIS IS THE SONG (OR NOISE) PLAYED WHEN A HERO DIES.

HEROEND:
	.byte 	VOICE0,HIGH_PIANO,PAUSE+N4,HC+N16,B+N16,Ax+N16,G+N16,F+N16
	.byte 	E+N16,D+N16,C+N4,ENDPLAY

;THIS NOISE IS USED WHEN THE HERO SHOOTS AN ENEMY.

ENEMYTHUD:
.byte 	VOICE3,LOADALL,$88,$40,$8A,$0D
.byte 	PAUSE+N8,ENDPLAY

;THIS IS THE NOISE THE HERO MAKES WHEN HE JUMPS.

HEROJUMP:
.byte 	VOICE1,LOADALL,$C6,$9D,$00,$0C
.byte 	PAUSE+N4,ENDPLAY

;THIS NOISE IS MADE WHEN AN ENEMY COLLIDES WITH THE HERO OR SHOOTS HIM.

HEROHIT:
.byte 	VOICE3,LOADALL,$88,$40,$8A,$0D
.byte 	PAUSE+N8,ENDPLAY

;************************************************************************
;THIS TABLE CONTAINS THE ENEMY IMAGES THAT CAN BE USED WITH THE
;LAUNCH ENEMY COMMANDS.   THE ENEMY IS THE NAME OF THE DRAWING PROGRAM
;SPRITE ANIMATION.  THE FIRST CAN THEN BE REFERENCED AS #0, THE SECOND
;AS #1, ETC.  REMEMBER THAT EACH ENEMY TYPE CANNOT NECESSARILY BE USED
;IN EACH WORLD BECAUSE IT MIGHT BELONG TO A DIFFERENT VIDEO BANK (SET).
;
;WHEN DRAWN, ENEMIES MUST FACE THE RIGHT.  IF YOU GOOF, REMEMBER THAT ITS
;EASY TO FIX THAT WITH SPRITES IN THE DRAWING PROGRAM.  JUST USE THE FLIP
;KEY.  OR IF YOU HAVE A DATA TABLE IN TEXT EDITOR FORMAT, REVERSE BYTE
;SEQUENCE ON EACH ROW AND SET BIT $40 IN THE PALETTE BYTE.
;
;**********************************************************************
	
ENEMYTAB:			;ENEMY SPRITE ASSIGNMENT TABLE

	.word 	THUG  		;0 BANK 0 THUG (PIER) WHO WILL CHASE HERO
	.word 	DEALING		;1 BANK 0 PUSHER WHO WILL CHASE HERO
	.word 	DEALING		;2 BANK 0 PUSHER WHO GUARDS AREA.
	.word 	SPACEMAN	;3 BANK 0 SPACEMAN WHO GUARDS AREA.
	.word 	CRITTER		;4 BANK 0 CRITTER
	.word 	BIRD		;5 BANK 0 BIRD
	.word 	COCHRCH		;6 BANK 0 BUG WITH A KEY IN IT
	.word 	GATORING	;7 BANK 1 ALIGATOR
	.word 	HEROBOAT	;8 BANK 1 ENEMY BOAT FOR SWAMP (NOT USED)
	.word 	SHARKING	;9 BANK 1 SHARK THAT IS TERRITORIAL
	.word 	BUZZER 		;A BANK 0 BEE
	.word 	METEOR		;B BANK 1 METEOR
	.word 	LITLMETR	;C BANK 1 LITTLE METEOR
	.word 	SATLITE		;D BANK 1 SATALITE
	.word 	SAUC		;E BANK 1 FLYING SAUCER
	.word 	LITLSHIP	;F BANK 1 CRAFT.  LEFT/RIGHT DARTER.
	.word 	ZOOKING		;10 BANK 2 BAZOOKA ENEMY WHO CHASES ON Y AXIS
	.word 	ZOOKING		;11 BANK 2 BAZOOKA ENEMY WHO GUARDS
	.word 	ROBOCOP		;12 BANK 2 ROBOCOP ENEMY
	.word 	HVRCRAFT	;13 BANK 2 HOVER CRAFT (UNKILLABLE)
	.word 	HVRCRAFT	;14 BANK 2 HOVER CRAFT
	.word 	BLKDROID	;15 BANK 3 ENEMY (BLACK IN WAREHOUSE)
	.word 	BULLYPIT	;16 BANK 3 PITBUL 
	.word 	BOMB		;17 BANK 3 PITBULL'S BOMBS
	.word 	SAUC		;18 BANK 1 FLYING SAUCER, SHOOTS 45 DEGREES
	.word 	MINE		;19 BANK 1 SPACE MINE
	.word 	BATFLY		;1A BANK 0 BAT
	.word 	BOMBER		;1B BANK 2 BOMB DROPPER
	.word 	WALLSHOT	;1C BANK 2 OR 3 WALL GUN THAT SHOOTS 45 DEGREE
	.word 	RAT		;1D BANK 3 RAT
	.word 	CHOPPER		;1E BANK 1 HELECOPTER
	.word 	BOMBER		;1F BANK 2 WALKING BOMB 
	.word 	TRACK		;20 BANK 2 FLOATING BLOBS FROM ANTENNAS
	.word 	PITKEY		;21 BANK 3 CARD (KEY) TO PITBULL'S DEN
	.word 	COKES0		;22 BANK 0 COKE
	.word 	CASHS0		;23 BANK 0 CASH
	.word 	CASES0		;24 BANK 0 SUITCASE
	.word 	HEALTHPRIZE	;25 HEALTH PRIZE, ALL BANKS
	.word 	WORM		;26 BANK 2 WORM (TECHNOPOLIS)
	.word 	PLATFORM	;27 BANK 2 PLATFORM
	.word 	ROBOHALF	;28 BANK 2 1/2 ROBOCOP ENEMY
	.word 	COCHRCH		;29 BANK 0 BUG WITH NO KEY IN IT
	.word 	SHARKING	;2A BANK 1 SHARK THAT FOLLOWS YOU
	.word 	SPIDEY		;2B BANK 0 SPIDER
	.word 	GUNTURET	;2C BANK 1 GUN TURRET
	.word 	BOLT		;2D BANK 3 LIGHTENING BOLT FOR LAST SCENE
	.word 	BLOBBING	;2E BANK 3 BLOB
	.word 	GUNDOWN		;2F BANK 3 GUN MACHINE UNDER BEAMS
	.word 	FLYANIM		;30 BANK 3 FLYING ENEMY CLOUD THAT CIRCLES
	.word 	FLYANIM		;31 BANK 3 CLOUD THAT JUST TRACKS ON X
	.word 	WALLSHOT	;32 BANK 2 OR 3 WALL GUN THAT SHOOTS HORZ.
	.word 	LOGUP		;33 BANK 1 LOG THAT GOES VERTICALLY
	.word 	LOGSIDE		;34 BANK 1 LOG THAT GOES HORIZONTALLY
	.word 	ARMRBT0		;35 BANK 0 ARMOR BOOTS
	.word 	ARMRBT3		;36 BANK 3 ARMOR BOOTS
	.word 	COOLGUN0	;37 BANK 0 PIER FREEZE GUN
	.word 	COOLGUN3	;38 BANK 3 WAREHOUSE FREEZE GUN
	.word 	REDROID		;39 BANK 3 ENEMY (RED)
	.word 	MEANCHOP	;3A BANK 1 MEAN CHOPPER
	.word 	COOLGUN0	;3B BANK 0 PIER FREEZE GUN
	.word 	COOLGUN3	;3C BANK 3 WAREHOUSE FREEZE GUN
	.word 	POWERUP		;3D BANK 1 SPACE GUN

;THIS TABLE CONTAINS THE SOUND EACH ENEMY MAKES WHEN HE SHOOTS.  PUT
;0  HERE IF THERE IS NONE OR IF THE ENEMY DOES NOT SHOOT.

ENEMYSND:
	.word 	ENMYSHOT	;0 BANK 0 THUG (PIER) WHO WILL CHASE HERO
	.word 	ENMYSHOT	;1 BANK 0 PUSHER WHO WILL CHASE HERO
	.word 	ENMYSHOT	;2 BANK 0 PUSHER WHO GUARDS AREA.
	.word 	ENMYSHOT	;3 BANK 0 SPACEMAN WHO GUARDS AREA.
	.word 	0      		;4 BANK 0 CRITTER
	.word 	FALLING		;5 BANK 0 BIRD THAT DROPS SHIT
	.word 	0      		;6 BANK 0 BUG WITH A KEY IN IT
	.word 	0      		;7 BANK 1 ALIGATOR
	.word 	SPACESHOT	;8 BANK 1 ENEMY SHORT SPACE SHIP (STRAIGHT)
	.word 	0      		;9 BANK 1 SHARK THAT IS TERRITORIAL
	.word 	BEEBUZZ		;A BANK 0 BEE
	.word 	0      		;B BANK 1 METEOR
	.word 	0      		;C BANK 1 LITTLE METEOR
	.word 	SPACESHOT  	;D BANK 1 SATALITE
	.word 	BAZOSHOT 	;E BANK 1 FLYING SAUCER
	.word 	ENMYSHOT 	;F BANK 1 CRAFT.  LEFT/RIGHT DARTER.
	.word 	BAZOSND		;10 BANK 2 BAZOOKA ENEMY WHO CHASES ON Y AXIS
	.word 	BAZOSND		;11 BANK 2 BAZOOKA ENEMY WHO GUARDS
	.word 	ENMYSHOT	;12 BANK 2 ROBOCOP ENEMY
	.word 	HOVERBUL	;13 BANK 2 HOVER CRAFT 
	.word 	HOVERBUL	;14 BANK 2 HOVER CRAFT
	.word 	ENMYSHOT	;15 BANK 3 ENEMY (BLACK IN WAREHOUSE)
	.word 	WATER_SND	;16 BANK 3 PITBUL 
	.word 	BALLSND		;17 BANK 3 BOMBS
	.word 	BAZOSND		;18 BANK 1 FLYING SAUCER, SHOOTS 45 DEGREES
	.word 	0      		;19 BANK 1 SPACE MINE
	.word 	SQUEEK		;1A BANK 0 BAT
	.word 	FALLING		;1B BANK 2 BOMB DROPPER
	.word 	BAZOSND		;1C BANK 2 OR 3 WALL GUN THAT SHOOTS 45 DEGREE
	.word 	SQUEEK 		;1D BANK 3 RAT
	.word 	ENMYSHOT	;1E BANK 1 HELECOPTER
	.word 	0      		;1F BANK 2 WALKING BOMB 
	.word 	CYCLESHOT	;20 BANK 3 PITBULL GUN BALL
	.word 	0      		;21 BANK 3 CARD (KEY) TO PITBULL'S DEN
	.word 	0      		;22 BANK 0 COKE
	.word 	0      		;23 BANK 0 CASH
	.word 	0      		;24 BANK 0 SUITCASE
	.word 	0      		;25 HEALTH PRIZE, ALL BANKS
	.word 	0      		;26 BANK 2 WORM (TECHNOPOLIS)
	.word 	0      		;27 BANK 2 PLATFORM
	.word 	CYCLESHOT	;28 BANK 2 1/2 ROBOCOP ENEMY
	.word 	0      		;29 BANK 0 BUG WITH NO KEY IN IT
	.word 	0      		;2A BANK 1 SHARK THAT FOLLOWS YOU
	.word 	0      		;2B BANK 0 SPIDER
	.word 	TURRETSND	;2C BANK 1 GUN TURRET
	.word 	BOOM   		;2D BANK 3 LIGHTENING BOLT FOR LAST SCENE
	.word 	0      		;2E BANK 3 BLOB
	.word 	DROPBULT	;2F BANK 3 GUN MACHINE UNDER BEAMS
	.word 	BOOM   		;30 BANK 3 FLYING ENEMY CLOUD THAT CIRCLES
	.word 	BOOM   		;31 BANK 3 CLOUD THAT JUST TRACKS ON X
	.word 	CYCLESHOT	;32 BANK 2 OR 3 WALL GUN THAT SHOOTS HORZ.
	.word 	0      		;33 BANK 1 LOG THAT GOES VERTICALLY
	.word 	0      		;34 BANK 1 LOG THAT GOES HORIZONTALLY
	.word 	0      		;35 BANK 0 ARMOR BOOTS
	.word 	0      		;36 BANK 3 ARMOR BOOTS
	.word 	0      		;37 BANK 0 PIER FREEZE GUN
	.word 	0      		;38 BANK 3 WAREHOUSE FREEZE GUN
	.word 	POWERSND	;39 BANK 3 ENEMY (RED)
	.word 	ENMYSHOT	;3A BANK 1 HELECOPTER
	.word 	0      		;3B BANK 0 PIER FREEZE GUN
	.word 	0      		;3C BANK 3 WAREHOUSE FREEZE GUN
	.word 	0      		;3C BANK 3 WAREHOUSE FREEZE GUN

;THESE ARE THE SOUNDS IN ENEMYSND

HOVERBUL:
	.byte 	VOICE1,LOADALL,$0F,$92,$77,$90,PAUSE+N2,ENDPLAY

DROPBULT:
	.byte 	VOICE1,LOADALL,$BD,$CE,$00,$A2,PAUSE+N2,ENDPLAY

POWERSND:
	.byte 	VOICE1,LOADALL,$BD,$8C,$CD,$D3,PAUSE+N2,ENDPLAY

BALLSND:
	.byte 	VOICE1,LOADALL,$0D,$8E,$EC,$B7,PAUSE+N2,ENDPLAY

SQUEEK:
	.byte 	VOICE1,LOADALL,$09,$8D,$2B,$68,PAUSE+N2,ENDPLAY

TURRETSND:
	.byte 	VOICE1,LOADALL,$9C,$8A,$1E,$89,PAUSE+N2,ENDPLAY

ENMYSHOT:
.byte 	VOICE3,LOADALL,$0A,$C9,$08,$0A
.byte 	PAUSE+N4,ENDPLAY

BEEBUZZ:
.byte 	VOICE1,LOADALL,$5F,$D7,$41,$B4
.byte 	PAUSE+N4,ENDPLAY

;THIS THE SOUND MADE FOR ALL EXPLODING ENEMY TYPES.

BAZOSND:
.byte 	VOICE3,LOADALL,$0A,$19,$6E,$0A
.byte 	PAUSE+N2,ENDPLAY

;THIS TABLE DEFINES IF AN PARTICULAR ENEMY IS A BOSS OR NOT.  THERE
;ARE 8 ALLOWED BOSSES IN THE GAME.  YOU MAY SET 1 OF 8 BITS BELOW
;FOR UP TO 8 DIFFERENT ENEMIES.  IF A BOSS IS KILLED, THAT BOSS WILL
;NOT BE RELAUNCHED EVEN IF THE WORLD IS EXITED AND RE-ENTERED.  A KEY
;MAY ALSO BE DEFINED AS A BOSS IF YOU ONLY WANT IT TO APPEAR 1 TIME.

BOSSNUMBER:
	.byte   	%00000000	;BANK 0 THUG (PIER)
	.byte   	%00000000	;BANK 0 PUSHER 
	.byte   	%00000000	;BANK 0 PUSHER 
	.byte   	%00000000	;BANK 0 SPACEMAN 
	.byte   	%00000000	;BANK 0 CRITTER
	.byte  	%00000000	;BANK 0 BIRD
	.byte  	%00000001	;BANK 0 BUG WITH KEY IN IT
	.byte   	%00000000	;BANK 1 ALIGATOR
	.byte   	%00000000	;BANK 1 ENEMY BOAT
	.byte   	%00000000	;BANK 1 SHARK
	.byte  	%00000000	;BANK 0 BEE
	.byte   	%00000000	;BANK 1 EXPLODING METEOR
	.byte   	%00000000	;BANK 1 LITTLE METEOR
	.byte   	%00000000	;BANK 1 SATALITE
	.byte   	%00000000	;BANK 1 FLYING SAUCER
	.byte   	%00000000	;BANK 1 CRAFT
	.byte   	%00000000	;BANK 2 BAZOOKA ENEMY
	.byte   	%00000000	;BANK 2 BAZOOKA ENEMY
	.byte   	%00000000	;BANK 2 ROBOCOP ENEMY
	.byte   	%00000000	;BANK 2 HOVER CRAFT
	.byte   	%00000000	;BANK 2 HOVER CRAFT
	.byte   	%00000000	;BANK 3 ENEMY (WAREHOUSE)
	.byte   	%00000000	;BANK 3 PITBUL 
	.byte  	%00000000
	.byte   	%00000000	;BANK 1 FLYING SAUCER
	.byte  	%00000000	;BANK 1 MINE
	.byte  	%00000000	;BANK 0 BAT
	.byte  	%00000000	;BANK 2 BOMBER
	.byte  	%00000000	;BANK 3 WALL GUN
	.byte   	%00000000	;BANK 3 RAT
	.byte   	%00000000	;BANK 1 CHOPPER
	.byte  	%00000000	;BANK 2 ROLLING BOMBER
	.byte  	%00000000	;BANK 3 PITBULL GUN
	.byte  	%00000010	;BANK 3 KEY # 1 FOR PITBULLS DOOR
	.byte   	%00000000	;22 BANK 0 COKE
	.byte   	%00000000	;23 BANK 0 CASH
	.byte   	%00000000	;24 BANK 0 SUITCASE
	.byte   	%00000000 	;HEALTH
	.byte  	%00000000	;26 BANK 2 WORM (TECHNOPOLIS)
	.byte  	%00000000	;27 BANK 2 PLATFORM
	.byte  	%00000000
	.byte  	%00000000	;BANK 0 BUG WITH NO KEY 
	.byte   	%00000000	;BANK 1 SHARK
	.byte  	%00000000
	.byte  	%00000000
	.byte  	%00000000
	.byte  	%00000000
	.byte  	%00000000
	.byte  	%00000000
	.byte  	%00000000
	.byte  	%00000000	;BANK 3 WALL GUN
	.byte  	%00000000
	.byte  	%00000000
	.byte  	%00000000
	.byte  	%00000000
	.byte  	%00000000
	.byte  	%00000000
	.byte   	%00000000	;BANK 3 ENEMY
	.byte   	%00000000	;BANK 1 CHOPPER
	.byte  	%00000000
	.byte  	%00000000
	.byte  	%00000000
		
;THIS TABLE DEFINES THE HEIGHT OF THE ENEMY IN PIXELS.  THIS HEIGHT CAN
;EVEN BE A VISUAL HEIGHT IF DESIRED AND NOT THE ACTUAL HEIGHT.  THE 
;HEIGHT DETERMINES WHERE  THE ENEMIES "FEET" ARE PRESUMED TO BE.  HOWEVER,
;IF THE ENEMY RESPONDS TO SOLID NO PORTION OF THE ACTUAL SPRITE WILL BE
;ALLOWED TO SINK INTO SOLID.

ENEMYHIGH:

	.byte 	32        	;BANK 0 THUG (PIER)
	.byte 	40		;BANK 0 PUSHER 
	.byte 	40		;BANK 0 PUSHER 
	.byte 	32	  	;BANK 0 SPACEMAN 
	.byte 	8		;BANK 0 CRITTER
	.byte 	16		;BANK 0 BIRD
	.byte 	16		;BANK 0 BUG
	.byte 	16 		;BANK 1 ALIGATOR
	.byte 	16 		;BANK 1 ENEMY BOAT
	.byte 	24		;BANK 1 SHARK
	.byte 	8		;BANK 0 BEE
	.byte 	16		;BANK 1 METEOR
	.byte 	8		;BANK 1 LITTLE METEOR
	.byte 	24		;BANK 1 SATALITE
	.byte 	16		;BANK 1 FLYING SAUCER
	.byte 	16		;BANK 1 CRAFT
	.byte 	32		;BANK 2 BAZOOKA ENEMY
	.byte 	32		;BANK 2 BAZOOKA ENEMY
	.byte 	40		;BANK 2 ROBOCOP ENEMY
	.byte 	32		;BANK 2 HOVER CRAFT THATS OUT OF CONTROL       
	.byte 	32		;BANK 2 HOVER CRAFT
	.byte 	40		;BANK 3 ENEMY (WAREHOUSE)
	.byte 	32		;BANK 3 PITBUL 
	.byte 	8
	.byte 	16		;BANK 1 FLYING SAUCER
	.byte 	16		;BANK 1 MINE
	.byte 	16		;BANK 0 BAT
	.byte 	16		;BANK 2 BOMBER
	.byte 	8		;BANK 3 WALL GUN
	.byte 	24		;BANK 3 KEY ENEMY
	.byte 	24		;BANK 1 CHOPPER
	.byte 	16		;BANK 2 ROLLING BOMBER
	.byte 	16		;BANK 3 ENERGY BLOBS
	.byte 	16		;BANK 3 KEY
	.byte  	8     		;22 BANK 0 COKE
	.byte  	8     		;23 BANK 0 CASH
	.byte  	8     		;24 BANK 0 SUITCASE
	.byte  	8     		;HEALTH
	.byte 	16		;26 BANK 2 WORM (TECHNOPOLIS)
	.byte 	16		;27 BANK 2 PLATFORM
	.byte 	16		;HALF A ROBOCOP
	.byte 	16		;BANK 0 BUG
	.byte 	24		;BANK 1 SHARK
	.byte 	8
	.byte 	16
	.byte 	8
	.byte 	8
	.byte 	16
	.byte 	16
	.byte 	16
	.byte 	8		;BANK 3 WALL GUN
	.byte 	24
	.byte 	8
	.byte 	16
	.byte 	16
	.byte 	8
	.byte 	8
	.byte 	40		;BANK 3 ENEMY
	.byte 	24		;BANK 1 CHOPPER
	.byte 	8
	.byte 	8
	.byte 	8
	
;THIS TABLE DEFINES THE WIDTH OF THE ENEMY IN PIXELS.

ENEMYWIDE:

	.byte 	16        	;BANK 0 THUG (PIER)
	.byte 	16		;BANK 0 PUSHER 
	.byte 	16		;BANK 0 PUSHER 
	.byte 	16	  	;BANK 0 SPACEMAN 
	.byte     	16		;BANK 0 CRITTER
	.byte 	16		;BANK 0 BIRD
	.byte 	48		;BANK 0 BUG
	.byte 	16 		;BANK 1 ALIGATOR
	.byte 	32 		;BANK 1 ENEMY BOAT
	.byte 	24		;BANK 1 SHARK
	.byte 	8		;BANK 0 BEE
	.byte 	16		;BANK 1 METEOR
	.byte 	8		;BANK 1 LITTLE METEOR
	.byte 	32		;BANK 1 SATALITE
	.byte 	16		;BANK 1 FLYING SAUCER
	.byte 	16		;BANK 1 CRAFT
	.byte 	16		;BANK 2 BAZOOKA ENEMY
	.byte 	16		;BANK 2 BAZOOKA ENEMY
	.byte 	16		;BANK 2 ROBOCOP ENEMY
	.byte 	32		;BANK 2 HOVER CRAFT
	.byte 	32		;BANK 2 HOVER CRAFT
	.byte 	16		;BANK 3 ENEMY (WAREHOUSE)
	.byte 	16		;BANK 3 PITBUL 
	.byte 	16
	.byte 	16		;BANK 1 FLYING SAUCER
	.byte 	16		;BANK 1 MINE
	.byte 	16		;BANK 0 BAT
	.byte 	16		;BANK 2 BOMBER
	.byte 	8		;BANK 3 WALL GUN
	.byte 	32		;BANK 3 KEY ENEMY
	.byte 	24		;BANK 1 CHOPPER
	.byte 	16		;BANK 2 ROLLING BOMBER
	.byte 	16		;BANK 3 ENERGY BLOBS
	.byte 	16		;BANK 3 KEY
	.byte  	16    		;22 BANK 0 COKE
	.byte  	16    		;23 BANK 0 CASH
	.byte  	16    		;24 BANK 0 SUITCASE
	.byte  	8    		;HEALTH
	.byte 	16		;26 BANK 2 WORM (TECHNOPOLIS)
	.byte 	16		;27 BANK 2 PLATFORM
	.byte 	16
	.byte 	48		;BANK 0 BUG
	.byte 	24		;BANK 1 SHARK
	.byte 	8
	.byte 	16
	.byte 	8
	.byte 	16
	.byte 	16
	.byte 	16
	.byte 	16
	.byte 	8		;BANK 3 WALL GUN
	.byte 	16
	.byte 	8
	.byte 	24
	.byte 	16
	.byte 	16
	.byte 	16
	.byte 	16		;BANK 3 ENEMY
	.byte 	24		;BANK 1 CHOPPER
	.byte 	16
	.byte 	16
	.byte 	16
		
;THIS TABLE DEFINES SPECIAL ENEMY FEATURES THAT ALLOW THE NORMAL LOGIC TO
;BE OVERRIDDEN.  FOR EACH ENEMY IN ENEMYTAB THERE IS A BYTE
;HERE WITH BIT MEANINGS:

;BITS 00000011B = THESE 2 BITS SPECIFY FROM 0 TO 3 ENEMIES THAT THIS
;		ENEMY MAY LAUNCH FROM ITSELF.  IF THE BITS ARE 0, THIS
;		ENEMY DOES NOT LAUNCH OTHER ENEMIES.  IF THE BITS ARE 01
;		THEN THIS ENEMY CAN LAUNCH 1 ENEMY TYPE.  THE ENEMY DIRECTLY
;		BELOW THIS ONE IN THE ENEMYTAB WILL BE USED.  BIT VALUES
;		ADDING UP TO 2 OR 3 WILL ALLOW 2 OR 3 DIFFERENT ENEMY TYPES
;		DIRECTLY FOLLOWING THIS ONE FROM ENEMYTAB TO BE LAUNCHED.
;		IT LAUNCHES WHEN THE SLOTS ARE AVAILABLE IN WAVES EVERY
;		4 SECONDS.
;
;BIT 00000100B = DONT REMOVE ENEMY.  WHEN SET, THE ENEMY WILL NOT BE REMOVED
;		IF IT GOES TO THE SCREEN BORDER.  ALSO, IT HAS NO TERITORY
;		LIMITS.  THIS IS FOR A MAIN ENEMY YOU DON'T WANT POPPING
;		IN AND OUT.  TYPICALLY YOU SHOULD LAUNCH THIS ONE WITH
;		THE FORCED LAUNCH.  BE CAREFUL WITH THIS BIT.  IF THE
;		ENEMY CANNOT KEEP UP WITH THE HERO, HE WILL SIT AGAINST
;		A SCREEN SIDE AS THE SCREEN SCROLLS.  HE MUST NOT SCROLL
;		INTO SOLID DATA IF HE HONORS SOLID!
;
;********** THESE 2 BITS MUST REMAIN HERE FOR COMMAND $37 *****************
;BIT 00001000B = ENEMY IS A MUST DEFEAT ENEMY FOR USE WITH THE DOOR COMMAND
;		THAT CHECKS FOR ALL ENEMIES HAVING BEEN DEFEATED (COMMAND 0F).
;		DON'T MAKE ANY PERMA LAUNCH MUST DEFEAT ENEMIES!
;BIT 00010000B = ENEMY IS A TOUCH FOR PRIZE (OR KEY).  CANNOT BE SHOT 
;		AND WHEN TOUCHED THE PRIZE SPECIFIED IN ENEMYPNTS 
;		IS AWARDED IMMEDIATLY.  BE SURE TO SET THE ENEMYHITS TO
;		1.  ALSO, MAKE ABSOLUTELY SURE THAT ENEMYPNTS SAYS WHAT PRIZE
;		OR HEALTH THIS IS BECAUSE IF IT DOESN'T THE SYSTEM MIGHT
;		CRASH.  IT CANNOT CONTAIN POINTS.  THIS BIT USED TO MAKE
;		IMAGES OF THINGS SUCH AS MONEY WHICH ARE PICKED UP BY 
;		TOUCHING THEM.
;
;BIT 00100000B = COLLISION WITH ENEMY IGNORED UNLESS HERO'S FEET TOUCH
;		IT. (USED IN 3D AREA FOR EVIL DEADLY OIL SLICKS OR 
;		 SMALL CREATURES).
;
;BIT 01000000B = ENEMY LAUNCHES AND HEADS IN DIRECTION OF HERO IN A STRAIGHT
;		 LINE ON THE Y AXIS MUCH LIKE A BULLET.  IT WILL CONTINUE
;		 UNTIL OFF SCREEN EVEN IF IT COLLIDES WITH THE HERO.
;		FOR THIS TYPE OF ENEMY, SET THE NO SPEED LIMIT BIT
;		IN ENEMYOPTS AND AVOID SETTING ANY OTHER MOTION BITS
;		INCLUDING GRAVITY.  IF YOU SET THE SOLID BIT, THE ENEMY
;		WILL REVERSE DIRECTION IF HE HITS SOLID.

;BIT 10000000B = ENEMY LAUNCHES AND HEADS IN DIRECTION OF HERO IN A STRAIGHT
;		 LINE ON THE X AXIS MUCH LIKE A BULLET.  IT WILL CONTINUE
;		 UNTIL OFF SCREEN EVEN IF IT COLLIDES WITH THE HERO.
;		FOR THIS TYPE OF ENEMY, SET THE NO SPEED LIMIT BIT
;		IN ENEMYOPTS AND AVOID SETTING ANY OTHER MOTION BITS
;		INCLUDING GRAVITY.  IF YOU SET THE SOLID BIT, THE ENEMY
;		WILL REVERSE DIRECTION IF HE HITS SOLID.

;
;THE EQUATES BELOW DETERMINE HOW FAST THE STRAIGHT LINE ENEMIES WILL
;TRAVEL.

SLOWSTRAIGHT	=	12
FASTSTRAIGHT	=	48

SPECENEMY:

	.byte  	%00001000	;BANK 0 THUG (PIER)
	.byte  	%00001000	;BANK 0 PUSHER 
	.byte  	%00001000	;BANK 0 PUSHER 
	.byte  	%00001000	;BANK 0 SPACEMAN 
	.byte  	%00000000	;BANK 0 CRITTER
	.byte 	%00000000	;BANK 0 BIRD
	.byte 	%00000000	;BANK 0 BUG WITH KEY IN IT
	.byte  	%00000000	;BANK 1 ALIGATOR
	.byte  	%00000000	;BANK 1 ENEMY BOAT
	.byte  	%00000000	;BANK 1 SHARK
	.byte 	%00000000	;BANK 0 BEE
	.byte  	%00000000	;BANK 1 EXPLODING METEOR
	.byte  	%00000000	;BANK 1 LITTLE METEOR
	.byte  	%00001110	;BANK 1 SATALITE
	.byte  	%00001000	;BANK 1 FLYING SAUCER
	.byte  	%00001000	;BANK 1 CRAFT
	.byte  	%00001000	;BANK 2 BAZOOKA ENEMY
	.byte  	%00001000	;BANK 2 BAZOOKA ENEMY
	.byte  	%00001000	;BANK 2 ROBOCOP ENEMY
	.byte  	%00001000	;BANK 2 HOVER CRAFT
	.byte  	%00001000	;BANK 2 HOVER CRAFT
	.byte  	%00000000	;BANK 3 ENEMY (WAREHOUSE)
	.byte  	%00001001	;BANK 3 PITBUL 
	.byte  	%00000000	;PITBULL CAN LAUNCH THIS BOMB
	.byte  	%00001000	;BANK 1 FLYING SAUCER
	.byte 	%00000000	;BANK 1 MINE
	.byte 	%00000000	;BANK 0 BAT
	.byte 	%00001000	;BANK 2 BOMBER
	.byte 	%00000000	;BANK 3 WALL GUN
	.byte  	%10000000	;BANK 3 RAT
	.byte  	%00001000	;BANK 1 CHOPPER
	.byte 	%00001000	;BANK 2 ROLLING BOMBER
	.byte 	%00000000	;BANK 3 PITBULL GUN
	.byte 	%00010000	;BANK 3 KEY # 1 FOR PITBULLS DOOR
	.byte  	%00010000	;22 BANK 0 COKE
	.byte  	%00010000	;23 BANK 0 CASH
	.byte  	%00010000	;24 BANK 0 SUITCASE
	.byte  	%00010000 	;HEALTH
	.byte 	%00000000	;26 BANK 2 WORM (TECHNOPOLIS)
	.byte 	%00000000	;27 BANK 2 PLATFORM
	.byte 	%00001000
	.byte 	%00000000	;BANK 0 BUG WITH NO KEY 
	.byte  	%00000000	;BANK 1 SHARK
	.byte 	%01000000	;SPIDER
	.byte 	%00000000	;TURRET
	.byte 	%00000000
	.byte 	%00100000	;2E.  BLOB
	.byte 	%00000000
	.byte 	%00000000
	.byte 	%00000000
	.byte 	%00000000	;BANK 3 WALL GUN
	.byte 	%01000000
	.byte 	%10000000
	.byte  	%00010000	
	.byte  	%00010000	
	.byte  	%00010000	
	.byte  	%00010000	
	.byte  	%00000000	;BANK 3 ENEMY
	.byte  	%00001000	;BANK 1 CHOPPER
	.byte  	%00010000	
	.byte  	%00010000	
	.byte  	%00010000	
	
;THIS TABLE DEFINES ASPECTS OF THE ENEMY THAT NEED TO BE KNOWN WHEN
;THE ENEMY IS LAUNCHED OR WHICH APPLY TO GRAVITY OR SPEED IN GENERAL.  
;FOR EACH ENEMY IN ENEMYTAB THERE IS A BYTE HERE WITH BIT MEANINGS:

;BIT 00000001B = ENEMY CANNOT PASS THROUGH SOLID CHARACTERS.
;BIT 00000010B = ENEMY ANIMATION ALIGNS HORIZONTALLY TO BACKGROUND EVERY 4.
;		 OTHERWISE IT JUST RUNS.
;BIT 00000100B = ENEMY FACES RIGHT.  0=LEFT
;BIT 00011000B = UNUSED FOR NOW
;BIT 00100000B = ENEMY IS NOT SUBJECT TO SPEED LIMITATION.
;BIT 01000000B = WHILE IN GRAVITY REGION, NO OTHER MOTIONS APPLY TO ENEMY.
;BIT 10000000B = ENEMY RESPONDS TO GRAVITY.

ENEMYOPTS:
	.byte  	%10000011	;BANK 0 THUG (PIER)
	.byte  	%10000011	;BANK 0 PUSHER 
	.byte  	%10000011	;BANK 0 PUSHER 
	.byte  	%10000011	;BANK 0 SPACEMAN 
	.byte  	%11100110	;BANK 0 CRITTER
	.byte 	%00000010	;BANK 0 BIRD
	.byte 	%10100011	;BANK 0 BUG WITH KEY IN IT
	.byte  	%00000010	;BANK 1 ALIGATOR
	.byte  	%00000110	;BANK 1 ENEMY BOAT
	.byte  	%00000110	;BANK 1 SHARK
	.byte 	%00000000	;BANK 0 BEE
	.byte  	%00000000	;BANK 1 EXPLODING METEOR
	.byte  	%00000000	;BANK 1 LITTLE METEOR
	.byte  	%00100000	;BANK 1 SATALITE
	.byte  	%00000000	;BANK 1 FLYING SAUCER
	.byte  	%00000100	;BANK 1 CRAFT
	.byte  	%10000010	;BANK 2 BAZOOKA ENEMY
	.byte  	%10000010	;BANK 2 BAZOOKA ENEMY
	.byte  	%10000010	;BANK 2 ROBOCOP ENEMY
	.byte  	%00000111	;BANK 2 HOVER CRAFT
	.byte  	%00000111	;BANK 2 HOVER CRAFT
	.byte  	%10000010	;BANK 3 ENEMY (WAREHOUSE)
	.byte  	%10100010	;BANK 3 PITBUL 
	.byte 	%10000000	;PITBULL'S BOMBS
	.byte  	%00000000	;BANK 1 FLYING SAUCER
	.byte 	%00000000	;BANK 1 MINE
	.byte 	%00000000	;BANK 0 BAT
	.byte 	%00000000	;BANK 2 BOMBER
	.byte 	%00000000	;BANK 3 WALL GUN
	.byte  	%00100010	;BANK 3 RAT
	.byte  	%00000000	;BANK 1 CHOPPER
	.byte 	%10000001	;BANK 2 ROLLING BOMBER
	.byte 	%00000000	;BANK 3 PITBULL GUN
	.byte 	%00000000	;BANK 3 KEY # 1 FOR PITBULLS DOOR
	.byte  	%00000000	;22 BANK 0 COKE
	.byte  	%00000000	;23 BANK 0 CASH
	.byte  	%00000000	;24 BANK 0 SUITCASE
	.byte  	%00000000 	;HEALTH
	.byte 	%10000011	;26 BANK 2 WORM (TECHNOPOLIS)
	.byte 	%00000000	;27 BANK 2 PLATFORM
	.byte 	%00000000
	.byte 	%10000011	;BANK 0 BUG WITH NO KEY 
	.byte  	%00000110	;BANK 1 SHARK
	.byte 	%00000001	;SPIDER
	.byte 	%00000000
	.byte 	%00000000
	.byte 	%10000010
	.byte 	%00000000
	.byte 	%00000010
	.byte 	%00000010
	.byte 	%00000000	;BANK 3 WALL GUN
	.byte 	%00100000	;LOG
	.byte 	%00100000	;LOG
	.byte 	%00000000
	.byte 	%00000000
	.byte 	%00000000
	.byte 	%00000000
	.byte  	%10000010	;BANK 3 ENEMY
	.byte  	%00000000	;BANK 1 CHOPPER
	.byte 	%00000000
	.byte 	%00000000
	.byte 	%00000000
	
;THESE NUMBERS ARE USED IN CONJUNCTION WITH THE MOTION BITS AND
;ARE ACTUALLY THEIR PARAMETERS.

CLOSEST		=	32	;DISTANCE ENEMIES TRY TO MAINTAIN FROM HERO ON X AXIS
TRACKSPEED	=	2	;MOMENTUM CHANGE POSSIBLE EVERY 1/15 SECOND FOR ENEMY
				;WHO IS TRACKING HERO.  BE CAREFUL BECAUSE THIS
				;EFFECTS THE WAY THE CIRCLING AND HOPPING, ETC
				;ENEMIES LOOK IF THEY ALSO TRACK THE HERO.

GUARDSPEED	=	4	;SPEED CHANGE WITH WHICH A GUARDIAN ENEMY CAN
				;RETURN TO HIS AREA.
GUARDDISTANCE	=	24	;DISTANCE A GUARDIAN WILL NOT STRAY FROM
				;HIS AREA.

SLOWSPEED	=	16	;FASTEST SPEED SLOW ENEMY IS ALLOWED TO HAVE.
				;THIS VALUE x 1.9 IS PIXELS PER SECOND.

FASTSPEED	=	32	;FASTEST SPEED FAST ENEMY IS ALLOWED TO HAVE.
				;THIS VALUE x 1.9 IS PIXELS PER SECOND.

BUMPFREEZE	=	10	;IF WE BUMP AN ENEMY AND TAKE DAMAGE, THIS
				;IS THE TIME TO FREEZE THE ENEMY TO GIVE
				;US A CHANCE TO ESCAPE.

YTRACK		=	8	;DISTANCE WITHIN WHICH Y TRACKING ENEMY
				;TRIES TO MATCH HERO.

;THIS TABLE DEFINES HOW EACH ENEMY MOVES.  THE MOTIONS CAN BE COMBINED
;TO COME UP WITH SOME UNUSUAL RESULTS.  REMEMBER THAT FLYING ENEMIES
;ARE ONES WHICH IN THE ENEMYOPTS TABLE DO NOT RESPOND TO GRAVITY AND
;ARE NOT ANIMATION ALIGNED.  THIS TABLE REFERS MORE TO HOW THE ENEMY MOVES
;AROUND ON THE SCREEN IN RESPONSE TO THE HERO.  FOR EACH ENEMY THERE IS
;A BYTE THAT HAS BIT MEANINGS:

;BIT %00000001 = APPLY CIRCULAR MOTION TO ENEMY.
;BIT %00000010 = APPLY HOPPING (VERTICALLY) MOTION TO ENEMY.
;BIT %00000100 = APPLY SWERVING (HORIZONTAL) MOTION TO ENEMY.
;BIT %00001000 = ENEMY WILL TRACK HERO ON THE X AXIS.  WILL STOP TRACKING
;		  IF IN RANGE OF "CLOSEST"
;BIT %00010000 = ENEMY WILL TRACK HERO ON THE Y AXIS.  WILL TRY TO 
;		  MATCH HERO'S LOCATION WITHIN "YTRACK".
;BIT %00100000 = ENEMY WILL GUARD THE AREA AROUND HIS LAUNCH POINT.  IF
;		  THE ENEMY ALSO TRACKS ON THE X AXIS, HE WILL MARCH BACK
;		  AND FORTH IN FRONT OF HIS GUARD LOCATION.  
;
;BIT %01000000 = ENEMY WILL NEVER GET TOO CLOSE TO HERO

;BIT %10000000 = UNUSED.

MOTION:
	.byte  	%01011000	;BANK 0 THUG (PIER)
	.byte  	%01011000	;BANK 0 PUSHER WHO CHASES
	.byte  	%01111000	;BANK 0 PUSHER WHO GUARDS
	.byte  	%00111000	;BANK 0 SPACEMAN 
	.byte  	%00011010	;BANK 0 CRITTER
	.byte 	%00111010	;BANK 0 BIRD
	.byte 	%01111000	;BANK 0 BUG
	.byte  	%00111100	;BANK 1 ALIGATOR
	.byte  	%00010000	;BANK 1 ENEMY BOAT
	.byte  	%00111010	;BANK 1 SHARK
	.byte 	%00011010	;BANK 0 BEE
	.byte  	%00000000	;BANK 1 EXPLODING METEOR
	.byte  	%00011000	;BANK 1 LITTLE METEOR
	.byte  	%00011001	;BANK 1 SATALITE
	.byte  	%01011001	;BANK 1 FLYING SAUCER
	.byte  	%01011100	;BANK 1 CRAFT
	.byte  	%01010000	;BANK 2 BAZOOKA ENEMY WHO LINES UP FOR SHOT
	.byte  	%01111000	;BANK 2 BAZOOKA ENEMY WHO GUARDS
	.byte  	%01011000	;BANK 2 ROBOCOP ENEMY
	.byte  	%00011111	;BANK 2 HOVER CRAFT
	.byte  	%00111000	;BANK 2 HOVER CRAFT
	.byte  	%01111000	;BANK 3 ENEMY (WAREHOUSE)
	.byte  	%00011000	;BANK 3 PITBUL 
	.byte 	%00011000	;PITBULL'S BOMBS
	.byte  	%01111001	;BANK 1 FLYING SAUCER
	.byte 	%00011000	;BANK 1 MINE
	.byte 	%00011010	;BANK 0 BAT
	.byte 	%00101010	;BANK 2 BOMBER
	.byte 	%00000000	;BANK 3 WALL GUN
	.byte  	%00000000	;BANK 3 RAT
	.byte  	%00011000	;BANK 1 CHOPPER
	.byte 	%00011000	;BANK 2 ROLLING BOMBER
	.byte 	%00011000	;BANK 3 PITBULL GUN
	.byte 	%00000000	;BANK 3 KEY
	.byte  	%00000000	;22 BANK 0 COKE
	.byte  	%00000000	;23 BANK 0 CASH
	.byte  	%00000000	;24 BANK 0 SUITCASE
	.byte  	%00000000 	;HEALTH
	.byte 	%00011000	;26 BANK 2 WORM (TECHNOPOLIS)
	.byte 	%00010000	;27 BANK 2 PLATFORM
	.byte 	%00000000
	.byte 	%01000100	;BANK 0 BUG
	.byte  	%00011010	;BANK 1 SHARK
	.byte 	%00000000	;SPIDER
	.byte 	%00000000
	.byte 	%00011000	;BOLT
	.byte 	%00111000	;BLOB
	.byte 	%00001000	;GUN MACHINE
	.byte 	%00001001	;FLYING CLOUD
	.byte 	%00001000	;FLYING CLOUD
	.byte 	%00000000	;BANK 3 WALL GUN
	.byte 	%00000000
	.byte 	%00000000
	.byte 	%00000000
	.byte 	%00000000
	.byte 	%00000000
	.byte 	%00000000
	.byte  	%01011010	;BANK 3 ENEMY
	.byte  	%00011000	;BANK 1 CHOPPER
	.byte 	%00000000
	.byte 	%00000000
	.byte 	%00000000

;THIS TABLE DEFINES HOW EACH ENEMY BEHAVES.  THE BEHAVIORS CAN BE
;COMBINED TO COME UP WITH DIFFERENT PERSONALITIES.

;BIT %00000001 = ENEMY CAN JUMP OVER BULLETS
;BIT %00000010 = ENEMY RUNS AS SOON AS HE HAS BEEN SHOT
;BIT %00000100 = 
;BIT %00001000 = 
;		  
;BIT %00010000 = 
;		  
;BIT %00100000 = DON'T RESET ENEMIES COLUMN FLAG WHEN PICKED UP.  WILL
;		  BE AVAILABLE AGAIN IF SCREEN IS RE-ENTERED.  DON'T SET
;		  THIS IN A BOSS ENEMY.
;
;BIT %01000000 = ENEMY IS FREEZE PROOF

;BIT %10000000 = ENEMY EXPLODES ON CONTACT WITH HERO AND KILLS HERO. 

BEHAVIOR:
	.byte  	%00000000	;BANK 0 THUG (PIER)
	.byte  	%00000000	;BANK 0 PUSHER WHO CHASES
	.byte  	%00000000	;BANK 0 PUSHER WHO GUARDS
	.byte  	%00000001	;BANK 0 SPACEMAN 
	.byte  	%00000000	;BANK 0 CRITTER
	.byte 	%00000000	;BANK 0 BIRD
	.byte 	%00000000	;BANK 0 BUG
	.byte  	%00000000	;BANK 1 ALIGATOR MONSTER
	.byte  	%00000000	;BANK 1 ENEMY BOAT
	.byte  	%00000000	;BANK 1 SHARK
	.byte 	%00000000	;BANK 0 BEE
	.byte  	%00000000	;BANK 1 EXPLODING METEOR
	.byte  	%10000000	;BANK 1 LITTLE METEOR
	.byte  	%01000001	;BANK 1 SATALITE
	.byte  	%00000000	;BANK 1 FLYING SAUCER
	.byte  	%00000000	;BANK 1 CRAFT
	.byte  	%00000000	;BANK 2 BAZOOKA ENEMY WHO LINES UP FOR SHOT
	.byte  	%00000000	;BANK 2 BAZOOKA ENEMY WHO GUARDS
	.byte  	%00000000	;BANK 2 ROBOCOP ENEMY
	.byte  	%00000000	;BANK 2 HOVER CRAFT
	.byte  	%00000000	;BANK 2 HOVER CRAFT
	.byte  	%00000001	;BANK 3 ENEMY (WAREHOUSE)
	.byte  	%01000001	;BANK 3 PITBUL 
	.byte 	%00000000	;PITBULL'S BOMBS
	.byte  	%10000000	;BANK 1 FLYING SAUCER
	.byte 	%10000000	;BANK 1 MINE
	.byte 	%00000000	;BANK 0 BAT
	.byte 	%10000000	;BANK 2 BOMBER
	.byte 	%00000000	;BANK 3 WALL GUN
	.byte  	%00000000	;BANK 3 RAT
	.byte  	%00000000	;BANK 1 CHOPPER
	.byte 	%10000000	;BANK 2 ROLLING BOMBER
	.byte 	%10000000	;BANK 3 PITBULL GUN
	.byte 	%00000000	;BANK 3 KEY
	.byte  	%00000000	;22 BANK 0 COKE
	.byte  	%00000000	;23 BANK 0 CASH
	.byte  	%00000000	;24 BANK 0 SUITCASE
	.byte  	%00000000 	;HEALTH
	.byte 	%00000000	;26 BANK 2 WORM (TECHNOPOLIS)
	.byte 	%00000000	;27 BANK 2 PLATFORM
	.byte 	%00000000
	.byte 	%00000000	;BANK 0 BUG
	.byte  	%00000000	;BANK 1 SHARK
	.byte 	%00000000	;SPIDER
	.byte 	%10000000
	.byte 	%10000000	;BOLT
	.byte 	%10000000	;BLOB
	.byte 	%00000000	;GUN MACHINE
	.byte 	%00000000	;FLYING CLOUD
	.byte 	%00000000	;FLYING CLOUD
	.byte 	%00000000	;BANK 3 WALL GUN
	.byte 	%10000000
	.byte 	%10000000
	.byte 	%00000000
	.byte 	%00000000
	.byte 	%00100000	;PIER FREEZE GUN
	.byte 	%00100000	;TECH FREEZE GUN
	.byte  	%00000000	;BANK 3 ENEMY
	.byte  	%01000001	;BANK 1 MEAN CHOPPER
	.byte 	%00100000	;PIER FREEZE GUN
	.byte 	%00100000	;TECH FREEZE GUN
	.byte 	%00100000	;SPACE 
	
;THIS LIST OF UP TO 15 ENTRIES DEFINES THE BULLET ANIMATIONS TO BE USED
;WITH EACH ENEMY TYPE ON THE TABLE ENEMYTAB.  BULLET ANIMATIONS SHOULD
;BE A SINGLE CHARACTER IF POSSIBLE.  IF YOU PUT 0 HERE BUT ARM THE
;BULLET IN BULLETTYPE, THEN THE CHARACTER WILL MAKE THE NOISE YOU SET
;AS ENEMYSND WHEN HE GETS THE HERO IN HIS SIGHTS (BUT WILL NOT FIRE).

BULLETLIST:
	.word 	SIMPLEB        	;BANK 0 THUG (PIER)
	.word 	SIMPLEB		;BANK 0 PUSHER 
	.word 	SIMPLEB		;BANK 0 PUSHER 
	.word 	DOUBLEB  	;BANK 0 SPACEMAN 
	.word 	SIMPLEB		;BANK 0 CRITTER
	.word 	SHIT   		;BANK 0 BIRD
	.word 	SIMPLEB		;BANK 0 BUG
	.word 	SIMPLEB 	;BANK 1 ALIGATOR
	.word 	SIMPLEB 	;BANK 1 ENEMY BOAT
	.word 	SIMPLEB		;BANK 1 SHARK
	.word 	0       	;BANK 1 BEE (BUZZES BUT DOESN'T SHOOT
	.word 	SIMPLEB		;BANK 1 METEOR
	.word 	SIMPLEB		;BANK 1 LITTLE METEOR
	.word 	BUBBLE		;BANK 1 SATALITE
	.word 	SPACEBALL	;BANK 1 FLYING SAUCER
	.word 	SIMPLEB		;BANK 1 CRAFT
	.word 	BAZOSHOT	;BANK 2 BAZOOKA ENEMY
	.word 	BAZOSHOT	;BANK 2 BAZOOKA ENEMY
	.word 	ROBOSHOT	;BANK 2 ROBOCOP ENEMY
	.word 	DOUBLEB		;BANK 1 HOVER CRAFT
	.word 	DOUBLEB		;BANK 1 HOVER CRAFT
	.word 	ROBOSHOT	;BANK 3 ENEMY (WAREHOUSE)
	.word 	KNIFING		;BANK 3 PITBUL 
	.word 	BOMB       	;PITBULL'S BOMB
	.word 	SPACEBALL	;BANK 1 FLYING SAUCER
	.word 	SIMPLEB		;BANK 1 MINE
	.word 	0		;BANK 1 BAT
	.word 	BAZOSHOT	;BANK 2 BOMBER
	.word 	WALLSHOT	;BANK 3 WALL GUN
	.word 	LUGI		;BANK 3 RAT
	.word 	SPACEBALL	;BANK 1 CHOPPER
	.word 	BAZOSHOT	;BANK 2 ROLLING BOMBER
	.word 	SIMPLEB 	;BANK 3 PITBULL GUN
	.word 	SIMPLEB 	;BANK 3 KEY
	.word 	SIMPLEB		;22 BANK 0 COKE
	.word  	SIMPLEB 	;23 BANK 0 CASH
	.word 	SIMPLEB		;24 BANK 0 SUITCASE
	.word 	SIMPLEB    	;HEALTH
	.word 	SIMPLEB		;26 BANK 2 WORM (TECHNOPOLIS)
	.word 	SIMPLEB		;27 BANK 2 PLATFORM
	.word 	BAZO2
	.word 	SIMPLEB		;BANK 0 BUG
	.word 	SIMPLEB		;BANK 1 SHARK
	.word 	SIMPLEB		
	.word 	SPACEBALL	
	.word 	SIMPLEB		
	.word 	SIMPLEB		
	.word 	WALLSHOT
	.word 	BOLT		
	.word 	BOLT		
	.word 	WALLSHOT	;BANK 3 WALL GUN
	.word 	SIMPLEB		
	.word 	SIMPLEB		
	.word 	SIMPLEB		
	.word 	SIMPLEB		
	.word 	SIMPLEB		
	.word 	SIMPLEB		
	.word 	FBALL		;BANK 3 ENEMY
	.word 	SPACEBALL	;BANK 1 CHOPPER
	.word 	SIMPLEB		
	.word 	SIMPLEB		
	.word 	SIMPLEB		

;THIS TABLE DEFINES HOW FAR DOWN TO LAUNCH AN ENEMIES BULLETS IN RESPECT
;TO HIS HEAD.

BULLET_DOWN:
	.byte 	4        	;BANK 0 THUG (PIER)
	.byte 	10		;BANK 0 PUSHER (12 CAUSE HE'S TALLER)
	.byte 	10		;BANK 0 PUSHER (12 CAUSE HE'S TALLER)
	.byte 	4  		;BANK 0 SPACEMAN 
	.byte 	0		;BANK 0 CRITTER
	.byte 	8		;BANK 0 BIRD
	.byte 	0		;BANK 0 BUG
	.byte 	4 		;BANK 1 ALIGATOR
	.byte 	4 		;BANK 1 ENEMY BOAT
	.byte 	4		;BANK 1 SHARK
	.byte 	4		;BANK 1 BEE
	.byte 	4		;BANK 1 METEOR
	.byte 	4		;BANK 1 LITTLE METEOR
	.byte 	1		;BANK 1 SATALITE
	.byte 	4		;BANK 1 FLYING SAUCER
	.byte 	4		;BANK 1 CRAFT
	.byte 	4		;BANK 2 BAZOOKA ENEMY
	.byte 	4		;BANK 2 BAZOOKA ENEMY
	.byte 	4		;BANK 2 ROBOCOP ENEMY
	.byte 	13		;BANK 2 HOVER CRAFT
	.byte 	13		;BANK 2 HOVER CRAFT
	.byte 	4		;BANK 3 ENEMY (WAREHOUSE)
	.byte 	4		;BANK 3 PITBUL 
	.byte 	0		;PITBULL'S BOMBS
	.byte 	8		;BANK 1 FLYING SAUCER
	.byte 	4		;BANK 1 MINE
	.byte 	4		;BANK 1 BAT
	.byte 	16		;BANK 2 BOMBER
	.byte 	0		;BANK 3 WALL GUN
	.byte 	14		;BANK 3 RAT
	.byte 	12		;BANK 1 CHOPPER
	.byte 	16		;BANK 2 ROLLING BOMBER
	.byte 	0		;BANK 3 WALL GUN
	.byte 	0		;BANK 3 KEY
	.byte  	0		;22 BANK 0 COKE
	.byte  	0		;23 BANK 0 CASH
	.byte  	0		;24 BANK 0 SUITCASE
	.byte  	0      		;HEALTH
	.byte 	0		;26 BANK 2 WORM (TECHNOPOLIS)
	.byte 	0		;27 BANK 2 PLATFORM
	.byte 	8		;HALF A ROBOCOP
	.byte 	0		;BANK 0 BUG
	.byte 	4		;BANK 1 SHARK
	.byte 	0
	.byte 	2		;TURRET
	.byte 	0
	.byte 	0
	.byte 	16
	.byte 	16
	.byte 	16
	.byte 	0		;BANK 3 WALL GUN
	.byte 	0
	.byte 	0
	.byte 	0
	.byte 	0
	.byte 	0
	.byte 	0
	.byte 	4		;BANK 3 ENEMY
	.byte 	12		;BANK 1 CHOPPER
	.byte 	0
	.byte 	0
	.byte 	0
		
;THIS TABLE DEFINES IF THE ENEMY CAN SHOOT AT THE HERO AND IF SO HOW HIS
;BULLETS TRAVEL.  THERE IS A BYTE FOR EACH ENEMY AND THE BYTE IS BIT
;ORIENTED (VALUE OF 0 MEANS NO SHOOTING).  YOU CAN MAKE THE ENEMY DO HIS
;BULLET FIRING SOUND (ENEMYSND) WITHOUT ACTUALLY SHOOTING BY PUTTING A
;LEGAL VALUE HERE AND PUTTING 0 AS THE BULLET IMAGE IN BULLETLIST.

;%00000001 = TRAVELS RIGHT
;%00000010 = TRAVELS LEFT
;%00000100 = TRAVELS DOWN
;%00001000 = TRAVELS UP
;%00010000 = 	CONTINUOUS SHOOTING REGARDLESS OF ENEMY POSITION.  
;%00100000 = BULLET RANGE IS DOUBLED.
;%01000000 = POWERFUL BULLET.  TAKES AWAY 4 HEALTH POINTS INSTEAD OF 1.
;%10000000 = FAST BULLET (OFF=SLOW BULLET).  

BULLETTYPE:
	.byte  	%00000011	;BANK 0 THUG (PIER)
	.byte  	%00000011	;BANK 0 PUSHER 
	.byte  	%00100011	;BANK 0 PUSHER 
	.byte  	%11000011	;BANK 0 SPACEMAN 
	.byte  	%00000000	;BANK 0 CRITTER
	.byte  	%00110100	;BANK 0 BIRD
	.byte  	%00000000	;BANK 0 BUG
	.byte  	%00000000	;BANK 1 ALIGATOR
	.byte  	%10100011	;BANK 1 ENEMY BOAT
	.byte  	%00000000	;BANK 1 SHARK
	.byte 	%00001111	;BANK 1 BEE
	.byte  	%00000000	;BANK 1 METEOR
	.byte  	%00000000	;BANK 1 METEOR
	.byte  	%11101111	;BANK 1 SATALITE
	.byte  	%11101111	;BANK 1 FLYING SAUCER
	.byte  	%10000011	;BANK 1 CRAFT
	.byte  	%11000011	;BANK 2 BAZOOKA ENEMY
	.byte  	%11000011	;BANK 2 BAZOOKA ENEMY
	.byte  	%00100011	;BANK 2 ROBOCOP ENEMY
	.byte  	%11000011	;BANK 2 HOVER CRAFT
	.byte  	%11000011	;BANK 2 HOVER CRAFT
	.byte  	%00100011	;BANK 3 ENEMY (WAREHOUSE)
	.byte  	%11101111	;BANK 3 PITBUL 
	.byte 	%00111111	;PITBULL'S BOMBS
	.byte  	%11111111	;BANK 1 FLYING SAUCER
	.byte 	%00000000	;BANK 1 MINE
	.byte 	%00001111	;BANK 1 BAT
	.byte 	%10100100	;BANK 2 BOMBER
	.byte 	%10010101	;BANK 3 WALL GUN
	.byte 	%11000011	;BANK 3 RAT
	.byte 	%11001111	;BANK 3 CHOPPER
	.byte 	%00000000	;BANK 2 ROLLING BOMBER
	.byte 	%00000000	;BANK 3 PITBULL GUN 
	.byte 	%00000000	;BANK 3 KEY
	.byte  	%00000000	;22 BANK 0 COKE
	.byte  	%00000000	;23 BANK 0 CASH
	.byte  	%00000000	;24 BANK 0 SUITCASE
	.byte  	%00000000 	;HEALTH
	.byte 	%00000000 	;26 BANK 2 WORM (TECHNOPOLIS)
	.byte 	%00000000 	;27 BANK 2 PLATFORM
	.byte 	%01110111
	.byte  	%00000000	;BANK 0 BUG
	.byte  	%00000000	;BANK 1 SHARK
	.byte 	%00000000
	.byte 	%11111111	;GUN TURRET
	.byte 	%00000000
	.byte 	%00000000
	.byte 	%01000100	;GUN MACHINE
	.byte 	%11000100
	.byte 	%11000100
	.byte 	%01000011	;BANK 3 PITBULL WALL GUN
	.byte 	%00000000
	.byte 	%00000000
	.byte 	%00000000
	.byte 	%00000000
	.byte 	%00000000
	.byte 	%00000000
	.byte  	%11100011	;BANK 3 ENEMY
	.byte 	%11001111	;BANK 3 CHOPPER
	.byte 	%00000000
	.byte 	%00000000
	.byte 	%00000000

;IN THE TABLE BELOW, A NUMBER OF SHOTS = 0 MEANS THE ENEMY CANNOT BE
;KILLED.

ENEMYHITS:			;NUMBER OF SHOTS TO KILL EACH ENEMY TYPE

	.byte  	2		;BANK 0 THUG (PIER)
	.byte  	4		;BANK 0 PUSHER 
	.byte  	4		;BANK 0 PUSHER 
	.byte  	6		;BANK 0 SPACEMAN 
	.byte  	1		;BANK 0 CRITTER
	.byte  	2		;BANK 0 BIRD
	.byte  	5		;BANK 0 BUG
	.byte  	4		;BANK 1 ALIGATOR
	.byte  	3		;BANK 1 ENEMY BOAT
	.byte  	4		;BANK 1 SHARK
	.byte  	1		;BANK 1 BEE
	.byte  	1		;BANK 1 METEOR
	.byte  	1		;BANK 1 LITTLE METEOR
	.byte  	20		;BANK 1 SATALITE
	.byte  	1		;BANK 1 FLYING SAUCER
	.byte  	1		;BANK 1 CRAFT
	.byte  	2		;BANK 2 BAZOOKA ENEMY
	.byte  	4		;BANK 2 BAZOOKA ENEMY
	.byte  	4		;BANK 2 ROBOCOP ENEMY
	.byte  	20		;BANK 2 HOVER CRAFT (UNKILLABLE)
	.byte  	20		;BANK 2 HOVER CRAFT
	.byte  	2		;BANK 3 ENEMY (WAREHOUSE)
	.byte  	20		;BANK 3 PITBUL 
	.byte  	2
	.byte  	1		;BANK 1 FLYING SAUCER
	.byte  	1		;BANK 1 MINE
	.byte  	2		;BANK 1 BAT
	.byte  	4		;BANK 2 BOMBER
	.byte  	0		;WALL GUN
	.byte  	6		;BANK 3 RAT
	.byte  	6		;BANK 1 CHOPPER
	.byte  	2		;BANK 2 ROLLING BOMBER
	.byte  	1		;BANK 3 PITBULL GUN
	.byte  	1		;BANK 3 KEY
	.byte  	1         	;22 BANK 0 COKE
	.byte  	1         	;23 BANK 0 CASH
	.byte  	1         	;24 BANK 0 SUITCASE
	.byte  	1           	;HEALTH
	.byte 	2		;26 BANK 2 WORM (TECHNOPOLIS)
	.byte 	0		;27 BANK 2 PLATFORM (CAN'T KILL IT)
	.byte 	4
	.byte  	4		;BANK 0 BUG
	.byte  	4		;BANK 1 SHARK
	.byte  	0		;SPIDER
	.byte  	0		;BANK 1 GUN TURRET
	.byte  	1		
	.byte  	0		
	.byte  	2		
	.byte  	3		
	.byte  	3		
	.byte  	0		;WALL GUN
	.byte 	0
	.byte 	0
	.byte  	1
	.byte  	1
	.byte  	1
	.byte  	1
	.byte  	2		;BANK 3 ENEMY
	.byte  	12		;BANK 1 MEAN CHOPPER
	.byte  	1
	.byte  	1
	.byte  	1

;THIS TABLE CONTROLS THE NUMBER OF POINTS TO AWARD FOR EACH ENEMY TYPE.
;HERE ARE THE VALUES:

;0-6 =  SIMPLE POINTS AWARD.  THE TABLE BELOW SHOWS HOW MANY
;$80-$85 = PRIZE AWARD. PRIZES ARE THE SAME AS THOSE OF COMMAND 2A.
;$A0-$AF = GUN REPLACEMENT.  LOW 4 BITS HAVE NEW GUN FROM BULLETDATA TABLE.
;-2 = ARMOR PROOF BOOTS (PROTECTS AGAINST 3 EXPLOSION COMMANDS). 
;-1 = HEALTH IS CONTAINED IN THE ENEMY (HERO HAS 4 SECONDS TO GET IT).

;PRIZES AND HEALTH ARE "INSIDE" THE ENEMY.  WHEN HE IS KILLED THEY ARE
;DISPLAYED FOR A WHILE ACCORDING TO THE TABLE PRIZE_TIME (OR 4 SECONDS FOR
;HEALTH.  THE ARMOR PROOF BOOTS ARE SUPPOSED TO BE REPRESENTED BY THE
;ACTUAL ENEMY SPRITE.  YOU MUST SET THE IMMEDIATE PRIZE BIT IN SPECENEMY
;FOR THIS ONE.  THE NEW GUNS ARE ALSO SUPPOSED TO BE REPRESENTED BY
;THE SPRITE AND THE IMMEDIATE PRIZE BIT IN SPECENEMY MUST ALSO BE SET.

ENEMYPNTS:			;NUMBER OF POINTS (0-6) GIVEN WHEN KILLED.

				; NO POINTS.   	0 POINTS
				; 100			1 POINTS
				; 200			2 POINTS
				; 500			3 POINTS
				;1000			4 POINTS
				;2000			5 POINTS
				;5000 POINTS		6 POINTS

	.byte  	2		;BANK 0 THUG (PIER)
	.byte  	-1		;BANK 0 PUSHER 
	.byte  	-1		;BANK 0 PUSHER 
	.byte  	$81		;BANK 0 SPACEMAN 
	.byte  	5		;BANK 0 CRITTER
	.byte 	4		;BIRD
	.byte 	$84		;BUG WITH SECOND PITBULL DOOR KEY IN IT.
	.byte  	2		;BANK 1 ALIGATOR 
	.byte  	3		;BANK 1 ENEMY BOAT
	.byte  	2		;BANK 1 SHARK
	.byte 	3		;BANK 1 BEE
	.byte  	1		;BANK 1 METEOR
	.byte  	2		;BANK 1 LITTLE METEOR
	.byte  	6		;BANK 1 SATALITE
	.byte  	-1		;BANK 1 FLYING SAUCER
	.byte  	4		;BANK 1 CRAFT
	.byte  	$82		;BANK 2 BAZOOKA ENEMY
	.byte  	$82		;BANK 2 BAZOOKA ENEMY
	.byte  	-1		;BANK 2 ROBOCOP ENEMY
	.byte  	6		;BANK 2 HOVER CRAFT
	.byte  	6		;BANK 2 HOVER CRAFT
	.byte  	$82		;BANK 3 ENEMY (WAREHOUSE)
	.byte  	$85		;BANK 3 PITBULL
	.byte 	-1		;PITBULL'S BALLS
	.byte  	-1		;BANK 1 FLYING SAUCER
	.byte 	1		;BANK 1 MINE
	.byte 	3		;BANK 1 BAT
	.byte 	6		;BANK 2 BOMBER
	.byte 	6		;BANK 3 WALL GUN
	.byte  	4		;BANK 3 RAT
	.byte 	-1		;BANK 1 CHOPPER
	.byte 	4		;BANK 2 ROLLING BOMBER
	.byte 	4		;BANK 3 PITBULL GUN
	.byte 	$84		;KEY
	.byte  	$80		;22 BANK 0 COKE
	.byte  	$81		;23 BANK 0 CASH
	.byte  	$82		;24 BANK 0 SUITCASE
	.byte  	-1	 	;HEALTH
	.byte 	1		;26 BANK 2 WORM (TECHNOPOLIS)
	.byte 	0		;27 BANK 2 PLATFORM
	.byte 	6
	.byte 	3    		;BUG WITH SECOND PITBULL DOOR KEY IN IT.
	.byte  	2		;BANK 1 SHARK
	.byte  	-1		
	.byte  	5		
	.byte  	3	 	;HEALTH
	.byte  	3	 	;HEALTH
	.byte  	6	 	;HEALTH
	.byte  	-1	 	;HEALTH
	.byte  	-1	 	;HEALTH
	.byte 	6		;BANK 3 WALL GUN
	.byte 	1
	.byte 	1
	.byte  	-2		;ARMOR BOOTS
	.byte  	-2		;ARMOR BOOTS
	.byte  	$A5		;PIER FREEZE GUN
	.byte  	$A5		;WAREHOUSE FREEZE GUN
	.byte  	$80		;BANK 3 ENEMY
	.byte 	-1		;BANK 1 CHOPPER
	.byte  	$A7		;PIER CIRCLE GUN
	.byte  	$A7		;WAREHOUSE CIRCLE GUN
	.byte  	$A8		;SPACE GUN
	
;THESE ARE THE POINTS SPRITE DEFFINITIONS TO USE FOR A GIVEN AMOUNT OF
;POINTS.  THEY WILL POP UP ABOVE ENEMIES THAT ARE KILLED.  0
;WILL PRODUCE NO DISPLAY.  THE VALUE HERE SHOULD BE A SPRITE ANIMATION
;DEFFINITION.  IT MUST BE VALID IN ALL WORLDS.  THE AMOUNTS OF POINTS
;ALLOWED ARE 0 TO 6.  SEE THE TABLE USE_PNTS TO SEE WHAT EACH VALUE AWARDS.

PNTS_PTR:		;POINTER TO SPRITE TO USE FOR GIVEN POINTS.
	.word 	0	;NULL POINTER MEANS POINTS NOT DISPLAYED.
	.word 	0
	.word 	0
	.word 	0
	.word 	0
	.word 	0
	.word 	0

USE_PNTS:		;BCD NUMBER OF POINTS TO USE FOR EACH INDEX IN PNT_TAB.
			;PNT_TAB INDEX IS BYTE, MUST BE SHIFTED FOR WORD
			;VALUE FROM THIS TABLE.  THIS TABLE IS POINTS/100
			;AND SCORE SHOULD BE DISPLAYED WITH 2 ZEROS FOLLOWING
			;IT.

	.byte 	0,0	;  NO POINTS.   	0 POINTS
	.byte 	1,0	; 100			1 POINTS
	.byte 	2,0	; 200			2 POINTS
	.byte 	5,0	; 500			3 POINTS
	.byte 	0,1	;1000			4 POINTS
	.byte 	0,2	;2000			5 POINTS
	.byte 	0,5	;5000 POINTS		6 POINTS

;THIS TABLE HAS THE SPRITE DEFFINTION POINTER FOR THE PRIZES 0-5 WHICH
;MAY BE HIDDEN IN AN ENEMY.  IF THE VALUE HERE IS 0, THE PRIZE IS AWARDED
;AS SOON AS THE ENEMY IS KILLED (THE ASSUMPTION IS THAT THE PICTURE OF
;THE ENEMY MAKES IT CLEAR THAT THERE IS A PRIZE IN HIM).

;FOR RAID 2020, THE LOCATION OF THE SPRITES FOR THE PRIZES IN EACH SET DIFFERS.
;SEE THE NOTES AS TO WHERE WE CAN PUT THINGS.

PRIZE_PTR:		
	.word 	COKEPRIZE
	.word 	CASHS0
	.word 	SUITCASE
	.word 	0		
	.word 	BUGKEY		;KEY TO PITBULL'S DEN THATS INSIDE THE BUG.
				;OTHER KEY IS AN ENEMY.
	.word 	TNTCARD		;FOR FINAL SCENE.

;THIS TABLE HAS THE NUMBER OF SECONDS THAT THE PLAYER HAS TO PICK UP A
;GIVEN PRIZE.  15 IS 1 SECOND. MAX IS 254.  HEALTH IS AUTOMATICALLY 4 SECONDS.
;-1 = PRIZE DOES NOT GO AWAY (USE ONLY IF SCREEN CAN'T SCROLL).

PRIZE_TIME:
	.byte 	5*15	;COKE	PUT IN ENEMIES ONLY IN WAREHOUSE
	.byte 	5*15	;CASH	PUT IN ENEMIES ONLY IN PIER
	.byte 	5*15	;SUITCASE.  PUT IN ENEMIES ONLY IN TECH.
	.byte 	17*15
	.byte 	17*15
	.byte 	-1	;KEY
	.byte 	-1	;TNT CARD

PITKEY:   			;ONE KEY IS JUST THE TNT CARD
TNTCARD:  .byte  $08,$02,$01 ;BASE+$80 IF 1 BY 2, WIDTH, HEIGHT
.byte  $8F,$02,$C1,$02		;WAREHOUSE

SUITCASE:	.byte  8,$02,$01 ;BASE+$80 IF 1 BY 2, WIDTH, HEIGHT
.byte  $C6,$01,$C7,$01		;TECHNOPOLIS

COKEPRIZE:	.byte  8,$02,$01 ;BASE+$80 IF 1 BY 2, WIDTH, HEIGHT
.byte  $C3,$01,$C4,$01		;TECHNOPOLIS

BUGKEY:   .byte  $08,$02,$01 ;BASE+$80 IF 1 BY 2, WIDTH, HEIGHT
.byte  $46,$01,$47,$01	;KEY INSIDE THE BUG.

COKES0:   .byte  $08,$02,$01 ;BASE+$80 IF 1 BY 2, WIDTH, HEIGHT
.byte  $4E,$03,$4F,$03	;PIER COKE (AS ENEMY ONLY).

CASHS0:   .byte  $08,$02,$01 ;BASE+$80 IF 1 BY 2, WIDTH, HEIGHT
.byte  $2B,$03,$2C,$03	;PIER CASH (AS ENEMY OR PRIZE)

CASES0:   .byte  $08,$02,$01 ;BASE+$80 IF 1 BY 2, WIDTH, HEIGHT
.byte  $6D,$01,$6E,$01	;PIER SUITCASE (AS ENEMY ONLY)


;THIS TABLE SPECIFIES WHEN A GIVEN PRIZE COUNT IS TO WRAP AND AWARD A
;FREE HERO.  

PRIZE_WRAP:
	.byte 	99
	.byte 	99
	.byte 	12
	.byte 	4
	.byte 	4
	.byte 	4

;THIS SPRITE DEFFINITION IS USED WHEN AN ENEMY HOLDS HEALTH.

HEALTHPRIZE: .byte  8,$01,$01 ;BASE+$80 IF 1 BY 2, WIDTH, HEIGHT
.byte  $E5,$00

;***************** WORLD SPECIFICATION INFO ************************
;THE TABLES BELOW ALL HAVE 1 ENTRY PER WORLD AND EACH TABLE MUST
;BE FILLED IN FOR EACH WORLD.
;*******************************************************************

;THIS TABLE HAS THE BACKGROUND TO USE FOR A GIVEN WORLD.  THE TABLE
;MUST END WITH A 0.  THE FIRST WORLD AFTER RESET WILL ALWAYS BE WORLD 0.

USE_BACK:			;NAME OF BACKGROUND TO USE
	.word 	BOOTBACK  	;0 BOOT
	.word 	PIERSCENE 	;1 PIER (LENGTH, 200)
	.word 	SWAMPBAK	;2 SWAMP
	.word 	TECHBACK 	;3 TECHNOPOLIS (LENGTH, 240).  
	.word 	SPACEBAK	;4 SPACE
	.word 	WAREHOUSE	;5 WAREHOUSE A (LENGTH, 225)
	.word 	BULBACK		;6 PIT BULL (ACTUAL LENGTH, 32)
	.word 	TUNNEL		;7 TUNNEL INSIDE WAREHOUSE
	.word 	BATPIT		;8 BAT PIT INSIDE TUNNEL
	.word 	WAREHOUSE	;9 WAREHOUSE ENTERED THROUGH RIGHT DOOR OF PAIR
	.word 	BUGPIT		;10 BUG PIT INSIDE TUNNEL
	.word 	TUNLPIT		;11 TUNNEL PIT INSIDE LONG TUNNEL
	.word 	TUNLPIT		;12 TUNNEL PIT INSIDE LONG TUNNEL
	.word 	PITBACK		;13 PIT WITH BUG AND KEY INSIDE TUNNEL
	.word 	TUNNEL		;14 TUNNEL INSIDE WAREHOUSE

MAX_WORLD	=	15		;FIRST ILLEGAL WORLD # FOR CHEAT MODE

;THIS EQUATE TELLS WHICH WORLD TO START THE GAME FROM WHEN THE START
;BUTTON IS PRESSED.  WHEN THIS WORLD IS ACTIVATED, THE CONTINUE FEATURE
;IS ARMED FOR THE MAX YOU SET HERE.

FIRST_WORLD	=	$80	;INSTRUCTIONS WORLD 0.
MAX_CONTINUES	=	10

;THIS TABLE DETERMINES WHAT WORLD TO CONTINUE FROM IF THE USER USES THE
;CONTINUE FUNCTION (A+START) FROM A GIVEN WORLD.  HE CANNOT CONTINUE FROM
;A BRIEFING OR INSTRUCTIONS SCREEN.  FOR EACH WORLD # THERE IS THE WORLD TO
;CONTINUE FROM.  THIS WORLD MAY HOWEVER BE A BRIEFING SCREEN IF DESIRED.

CONTINUE_WORLD:
	.byte 	0	;BOOT
	.byte 	$81	;PIER
	.byte 	$82	;SWAMP
	.byte 	$83	;TECH
	.byte 	$84	;SPACE
	.byte 	$85	;WARE
	.byte 	$86	;PITBUL
	.byte 	$85	;TUNNEL
	.byte 	$85	;PIT
	.byte 	$85	
	.byte 	$85	
	.byte 	$85	
	.byte 	$85	
	.byte 	$85	
	.byte 	$85

;THIS TABLE DETERMINES THE LEFTMOST ALLOWED TEXT CELL LOCATION WITHIN
;THE CURRENT BACKGROUND.  YOU CAN USE PART OF A LARGER BACKGROUND
;AS ANOTHER BACKGROUND.  SET THE LEFT STARTING POSITION YOU WANT TO 
;GRAB AND USE HERE AND THEN SET BACK_WIDE TO THE WIDTH.  IF YOU JUST WANT
;TO USE THE WHOLE THING, SET THESE ENTRIES TO 0 AND SET BACK_WIDE TO
;THE ACTUAL WIDTH OF THE BACKGROUND.

LEFT_BACK:
	.byte 	0	;BOOT
	.byte 	0	;PIER
	.byte 	0	;SWAMP
	.byte 	0	;TECH
	.byte 	0	;SPACE
	.byte 	0	;WARE
	.byte 	0	;PITBUL
	.byte 	0	;TUNNEL		
	.byte 	0	;PIT
	.byte 	0	
	.byte 	0	;PIT
	.byte 	0	;PIT
	.byte 	0	;PIT
	.byte 	0	;PIT
	.byte 	96	;TUNNEL		

;THIS TABLE HAS THE ENTRY STARTING TEXT COLUMN WITHIN A GIVEN BACKGROUND.
;USE THIS TO START THE WORLD AT A PLACE OTHER THAN THE LEFT OF THE
;BACKGROUND.  THERE MUST BE AN ENTRY FOR EACH WORLD.  STARTING AT
;THIS OFFSET DOES NOT LIMIT THE LEFT OF THE SCREEN TO THIS COLUMN, THE
;HERO CAN WALK LEFT IF THE BACKGROUND WILL ALLOW THIS SCROLLING.

;THIS STARTING POINT IS WITHIN THE VIRTUAL SCREEN DEFINED BY LEFT_BACK.
;IN OTHERWORDS, IF LEFT_BACK SAYS COLUMN 32 WILL BE THE LEFTMOST IN
;A BACKGROUND, PUTTING 32 HERE WOULD PLACE YOU AT 64.

START_BACK:
	.byte 	0	;BOOT
	.byte 	0	;PIER
	.byte 	0	;SWAMP
	.byte 	0	;TECH
	.byte 	0	;SPACE
	.byte 	193	;WARE
	.byte 	0	;PITBUL
	.byte 	0	;TUNNEL		
	.byte 	0	;PIT
	.byte 	32	;WARE OUT FROM DOORS
	.byte 	0	;PIT
	.byte 	0	;PIT
	.byte 	0	;PIT
	.byte 	0	;PIT
	.byte 	0	;TUNNEL		

;THIS TABLE DETERMINES HOW WIDE YOU WANT THE BACKGROUND TO BE FROM THE
;LEFTMOST ALLOWED POINT IN THE BACKGROUND AS DEFINED IN THE TABLE
;LEFT_BACK.    

;A SPECIAL VALUE OF 0 MAY BE USED IF THE BACKGROUND IS
;EXACTLY 2 SCREENS WIDE AND YOU WANT TO SCROLL CONTINUOUSLY THROUGH IT
;AS IF IT WERE AN INFINITE LENGTH.   IN THIS CASE, YOUR CONTROLLING TABLE
;IS ASSUMED TO BE 64 WIDE AND YOUR BACKGROUND THE SAME AND START_BACK
;AND LEFT_BACK MUST BE SET TO 0.  ALSO, ALL SCROLL LIMIT COMMANDS ARE
;IGNORED.  ACTUALLY, YOUR REAL BACKGROUND COULD BE LONGER THAN 64 IF DESIRED
;BUT ONLY THE FIRST 64 WILL DISPLAY AS THE WORLD SCROLLS.

BACK_WIDE:
	.byte 	32		;BOOT
	.byte 	252		;PIER
	.byte 	128		;SWAMP
	.byte 	240		;TECH
	.byte 	0		;SPACE
	.byte 	225		;WARE
	.byte 	32		;PITBUL
	.byte 	96		;TUNNEL	(128 WIDE BUT LAST 32 SEPERATE WORLD)
	.byte 	32		;PIT
	.byte 	225		;WARE
	.byte 	32		;PIT
	.byte 	32		;PIT
	.byte 	32		;PIT
	.byte 	32		;PIT
	.byte 	32		;TUNNEL

;THIS EQUATE TELLS THE DEFAULT (WORLD BOOT) SINK LEVEL FOR THE HERO.  THIS
;IS THE LEVEL BELOW WHICH IF HIS FEET GOES HE IS PUT BEHIND THE BACKGROUND.
;THE DEATH LEVEL IS SET TO THE HERO'S HEIGHT BELOW THIS-1.  YOU CAN
;OVERRIDE THESE VALUES DURING GAME PLAY WITH A COMMAND.  THE LEVEL HERE
;IS THE SCAN LINE IN THE BACKGROUND.

SINKLEVEL	=	$FF
	
;THIS TABLE TELLS WHERE TO ENTER EACH WORLD.  YOU SHOULD GIVE A PIXEL
;OFFSET POSITION, X FIRST, Y SECOND.  THE TOP LEFT OF THE BACKGROUND IS 0,0.
;THIS TABLE ONLY FINE TUNES THE HERO'S START TO THE PIXEL LEVEL.  USE
;WORLDX TO START THE WORLD AT A GIVEN TEXT CELL (PIXEL*8) BOUNDRY.
;THE VALUE HERE WILL BE THE PLACE TO PUT THE UPPER LEFT CORNER OF THE HERO
;BUT THE FLAGS TESTING TAKES PLACE FROM THE MIDDLE OF THE HERO ON THE X.

;THE STARTING Y POSITION IS WITHIN THE BACKGROUND, NOT ON SCREEN.

HEROSTART:			;HERO STARTING POSITION
	.byte 	8,0		;WRLD 0 HERO'S X,Y STARTING PIXEL POSITION
	.byte 	8,140		;PIER A
	.byte 	0,120		;SWAMP
	.byte 	8,144		;TECH A
	.byte 	120,120		;SPACE.  DON'T CHANGE X START LOCATION!
	.byte 	224,126		;WARE A
	.byte 	0,120		;PITBUL
	.byte 	0,16		;TUNNEL		
	.byte 	96,0		;PIT
	.byte 	150,126		;WARE A
	.byte 	96,0		;PIT
	.byte 	96,0		;PIT
	.byte 	96,0		;PIT
	.byte 	96,0		;PIT
	.byte 	16,0		;TUNNEL

;THIS TABLE TELLS WHAT HERO TO USE FOR EACH WORLD.  
;IF YOU WANT TO CHANGE THE HERO AS THE GAME PROGRESSES,  USE A VALUE
;OF -1 AFTER THE INITIAL SETTING WHICH HERO TO USE FOR THE FIRST WORLD.
;A VALUE OF -1 MEANS NO CHANGE.

USE_HERO:	.byte  	9		;BOOT
		.byte  	4		;PIER A
		.byte  	10		;SWAMP
		.byte  	2		;TECH 
		.byte  	7		;SPACE
		.byte  	5		;WARE
		.byte  	5		;PITBULL
		.byte  	8		;TUNNEL		
		.byte  	8		;PIT
		.byte  	5		;WARE
		.byte  	8		;PIT
		.byte  	8		;PIT
		.byte  	8		;PIT
		.byte  	8		;PIT
		.byte  	8		;TUNNEL

;THIS TABLE IS USED AT WORLD START TO GET THE INFO ABOUT THE HERO AND HIS GUN
;IN THAT WORLD.  IT IS ALSO USED WITH THE DRESSING ROOM COMMAND WHICH ALLOWS 
;THE HERO TO CHANGE APPEARANCE AND BEHAVIOR WITHIN A WORLD.  SEE COMMAND 27.
;THE VALUES IN THE TABLE ARE:
;
;HERO ANIMATION (0 MEANS NO CHANGE).  IT MUST BE A RIGHT FACING ANIMATION,
;	NOT A SPRITE.  IT MUST BE MINIMUM WIDTH 2 AND MINIMUM HEIGHT 2.
;BULLET (-1 MEANS NO CHANGE) FROM TABLE BULLETDATA
;JUMP POWER (JUMP_POWER TABLE REPLACEMENT.) -1=NO CHANGE.  HERO WILL
;	BE ABLE TO JUMP THIS HIGH IN PIXELS WHEN THE B BUTTON IS PRESSED.
;MOMENTUM LIMITS FOR HERO (X,Y) -1=NO CHANGE.  THIS IS THE MOMENTUM LIMIT
;	WHEN IN THE NO GRAVITY REGION.  THE HERO WILL BE ABLE TO TRAVEL
;	1.9 TIMES IN PIXELS PER SECOND BUT LOW 3 BITS IGNORED.  MAX X IS 64,
;	MAX Y IS 127.
;GRAVITY MOMENTUM LIMITS FOR HERO (X,Y) -1=NO CHANGE.  SAME AS ABOVE BUT
;	THESE PERTAIN TO WHEN THE HERO IS IN THE GRAVITY REGION OR IS
;	FALLING FROM A JUMP.
;GRAVITY VALUES (X,Y) (-1=NO CHANGE).  THE VALUES HERE WILL BE ADDED TO
;	THE HERO'S MOMENTUM WHEN IN THE GRAVITY REGION.  BE CAREFUL NOT
;	TO LET THE UP ARROW KEY'S ABILITY EXCEED GRAVITY UNLESS YOU WANT
;	A FLYING HERO AND WATCH OUT FOR DOUBLE KEY COMBOS THAT ADD TOGETHER
;	AND CAN OVERCOME GRAVITY.
;GRAVITY DISABLE FLAG (GRAVDIS).  THIS FLAG TELLS WHETHER THE INERTIA 
;	CONTROL VALUE ASSOCIATED WITH THE ARROW KEYS BECOMES INOPERABLE 
;	WHEN IN THE GRAVITY REGION.  THIS IS NEEDED BECAUSE THE INERTIA 
;	VALUE WHEN HIGH CAN SOMETIMES OVERRIDE GRAVITY BY THRUSTING THE 
;	HERO'S SPEED ABOVE THE RANGE GRAVITY CAN HANDLE. IN GENERAL,
;	FOR A NON-FLYING HERO SET 1 HERE TO DISABLE THE KEY WHEN IN THE 
;	GRAVITY REGION, 0 TO ENABLE.  WHEN THERE IS A 1 HERE, NO Y 
;	MOMENTUM CHANGES OTHER THAN GRAVITY OR JUMP WILL BE ALLOWED IN 
;	THE GRAVITY REGION. X MOMENTUM CHANGES WILL BE ALLOWED BUT THE 
;	INERTIA OVERRIDE WILL NOT.
;LOW AND HIGH SOLID CHAR VALUES 
;	THESE BYTES HAVE THE LOW AND HIGH SOLID VALUES TO USE FOR A 
;	THE HERO. YOU DON'T HAVE TO HAVE SOLID VALUES, USE $00 IF YOU
;	WANT TO DISABLE SOLID CHECKING FOR THAT WORLD.  THE FIRST VALUE WILL
;	BE USED AT WORLD START.  THE SECOND VALUE IS USED ONLY WHEN THE BRIDGE
;	COMMANDS ARE ENCOUNTERED AND WILL BE PUT BACK TO THE FIRST WHEN THE
;	END BRIDGE COMMAND IS HIT.  THE BRIDGE COMMANDS ONLY MAKE SENSE WHEN
;	GRAVITY IS EMPLOYED AS THE SOLE FACTOR IN A 2 DIMENSIONAL WORLD.
;	THE ENEMIES WILL USE THE LOW SOLID VALUE. 
;FRICTION VALUES.  HORIZONTAL, VERTICAL.  THESE BYTES DETERMINE
;	THE FRICTION EXERTED ON MOVEMENTS.  THERE IS A 
;	VALUE FOR HORIZONTAL MOVEMENTS AND A VALUE FOR VERTICAL MOVEMENTS.
;	FRICTION IS EXERTED ONCE EVERY 4 NMI CYCLES.  FRICTION WILL NOT BE 
;	EXERTED IN A GIVEN AXIS IF ANY OTHER FORCE IS IN EFFECT (KEY PRESSED 
;	OR GRAVITY EXERTED).  IF YOU WANT NO MOVEMENT ONCE THE KEY IS LIFTED, 
;	SET THE VALUES TO THE SAME AS MOMLIMIT.
;CHANGE VULNERABILITY.  THIS BYTE SPECIFIES HOW MANY "HITS" THIS HERO CAN
;	TAKE BEFORE REVERTING TO THE HERO USED AT THE START OF THAT WORLD.
;	IT IS USED ONLY WITH THE DRESSING ROOM COMMAND WHICH CHANGES
;	THE WORLD BOOT HERO ANIMATION.  AT THE TIME THE DRESSING ROOM
;	COMMAND IS USED THE VALUE YOU PUT HERE IS LOADED INTO A COUNTER AND
;	EACH COLLISION WITH AN ENEMY OR HIT BY AN ENEMY BULLET LOWERS THE
;	COUNTER. WHEN IT RUNS OUT, THE HERO AUTOMATICALLY REVERTS TO THE
;	HERO TYPE USED WHEN THE WORLD WAS ACTIVATED.  PUT 0 HERE TO MAKE
;	THE HERO PERMANENT.  THE VALUE HERE IS IGNORED (SET TO 0) IF THE
;	ENTRY IS USED FOR A WORLD BOOT.  BUT THE SAME ENTRY MAY THEN
;	BE USED IN A DRESSING ROOM COMMAND AND THE VALUE WILL BE HONORED.
;	WHEN 0 IS USED IN A DRESSING ROOM COMMAND THIS HERO NUMBER BECOMES
;	THE ONE TO REVERT TO FOR FUTURE REVERSIONS.
;ENGINE SOUND.  THIS WORD SPECIFIES IF THERE IS A SOUND STRUCTURE TO BE
;	PLAYED WHEN THAT HERO IS ACTIVATED.  IT COULD BE A SONG THAT RUNS
;	OUT OR A REPEATING SOUND SUCH AS FOR AN ENGINE.  BUT YOU STILL HAVE
;	TO PLAN THE VOICE USAGE NOT TO CONFLICT WITH THE MUSIC.  PUT
;	"NOSOUND" HERE IF THERE IS NONE.

HEROTABLE:	.word 	CYCLING			;ENTRY 0 
		.byte 	2			;TECHNOPOLIS MOTOR CYCLE
		.byte 	68
		.byte 	64,64,64,64
		.byte 	0,8
		.byte 	1
		.byte 	0,0
		.byte 	4,4
		.byte 	3
		.word 	CYCLE

		.word 	HOVERING		;ENTRY 1 
		.byte 	3			;TECHNOPOLIS HOVER CRAFT
		.byte 	0
		.byte 	32,32,32,32
		.byte 	0,0
		.byte 	0
		.byte 	0,0
		.byte 	1,3
		.byte 	3
		.word 	HOVERSND

		.word 	TECHHERO		;ENTRY 2. NORMAL TECH HERO
		.byte 	0
		.byte 	40		
		.byte 	40,40,40,104
		.byte 	0,16		
		.byte 	1
		.byte 	$FD, $FD
		.byte 	40,40
		.byte 	0
		.word 	NOSOUND

		.word 	JETPACK			;ENTRY 3 FOR FLYING IN PIER
		.byte 	-1
		.byte 	0		
		.byte 	32,32,32,32
		.byte 	0,0
		.byte 	0
		.byte 	0,0
		.byte 	2,4
		.byte 	3
		.word 	JETSND

		.word 	HEROING			;ENTRY 4 NORMAL PIER HERO
		.byte 	0
		.byte 	40		
		.byte 	40,40,40,104
		.byte 	0,16		
		.byte 	1
		.byte 	$FD, $FD
		.byte 	40,40
		.byte 	0
		.word 	NOSOUND

		.word 	WAREHERO		;ENTRY 5. WAREHOUSE HERO
		.byte 	0
		.byte 	40		
		.byte 	40,40,40,104
		.byte 	0,16		
		.byte 	1
		.byte 	$FD, $FD
		.byte 	40,40
		.byte 	0
		.word 	NOSOUND

		.word 	BOATING			;ENTRY 6.  SWAMP BOAT
		.byte 	6			;BULLET
		.byte 	0			;JUMP POWER
		.byte 	24,24,24,24		;MOMLIMIT AND GMOMLIMIT
		.byte 	0,0			;GRAVITY VALUES
		.byte 	0  			;GRAVDIS
		.byte 	$00, $00		;SOLID
		.byte 	4,4			;FRICTION
		.byte 	0
		.word 	SWAMPSND

		.word 	OURSHIP			;ENTRY 7.  SPACE
		.byte 	4			;BULLET
		.byte 	0			;JUMP POWER
		.byte 	64,64,64,64		;MOMLIMIT AND GMOMLIMIT
		.byte 	0,0			;GRAVITY VALUES
		.byte 	0  			;GRAVDIS
		.byte 	$00, $00		;SOLID
		.byte 	8,12			;FRICTION
		.byte 	0
		.word 	SPACESHIP

		.word 	HEROING			;ENTRY 8 PITS HERO
		.byte 	-1			;NO BULLET CHANGE
		.byte 	40		
		.byte 	40,40,40,104
		.byte 	0,16		
		.byte 	1
		.byte 	$80, $80
		.byte 	40,40
		.byte 	0
		.word 	NOSOUND

		.word 	BOOTHERO		;ENTRY 9 DUMMY BOOT UP HERO
		.byte 	0
		.byte 	40		
		.byte 	32,32,32,96
		.byte 	0,16		
		.byte 	1
		.byte 	$80, $80
		.byte 	40,40
		.byte 	0
		.word 	NOSOUND

		.word 	JETSKING		;ENTRY 10  SWAMP JETSKI
		.byte 	1			;BULLET
		.byte 	0			;JUMP POWER
		.byte 	48,48,48,48		;MOMLIMIT AND GMOMLIMIT
		.byte 	0,0			;GRAVITY VALUES
		.byte 	0  			;GRAVDIS
		.byte 	$00, $00		;SOLID
		.byte 	6,6			;FRICTION
		.byte 	0
		.word 	JETSND

DRESSWIDE	=	18		;WIDTH OF EACH TABLE ENTRY

;HERE ARE THE ENGINE SOUNDS FOR A GIVEN HERO.

JETSND:
	.byte 	VOICE3,LOADALL,$20,$15,$0F,$02,REPLAY

CYCLE:
	.byte 	VOICE1,LOADALL,$39,$98,$EF,$06,REPLAY

SPACESHIP:
	.byte 	VOICE3,LOADALL,$20,$00,$3F,$00,REPLAY

SWAMPSND:
	.byte 	VOICE1,LOADALL,$20,$02,$FF,$04,REPLAY

HOVERSND:
	.byte 	VOICE3,LOADALL,$20,$0D,$FF,$00,REPLAY

;THIS VALUE TELLS WHAT HERO ANIMATION TO USE WHEN HE DIES.  THERE IS ONLY
;1 ALLOWED FOR THE WHOLE GAME.

DEAD_HERO:	.word 	HEXPLODES

HEXPLODES: .byte  $53,$03,$10 ;4F=OBJECT/53=SPRITE, SCENES, FREQUENCY
.word 	HEX1
.word 	HEX2
.word 	HEX3

HEX1: .byte  $00,$02,$03 ;BASE+$80 IF 1 BY 2, WIDTH, HEIGHT
.byte  $FA,$00,$FA,$00
.byte  $E8,$00,$E8,$40	;NEW ROW
.byte  $E8,$80,$E8,$C0	;NEW ROW

HEX2: .byte  $00,$02,$03 ;BASE+$80 IF 1 BY 2, WIDTH, HEIGHT
.byte  $FA,$00,$FA,$00
.byte  $E9,$00,$E9,$40	;NEW ROW
.byte  $E9,$80,$E9,$C0	;NEW ROW

HEX3: .byte  $00,$02,$03 ;BASE+$80 IF 1 BY 2, WIDTH, HEIGHT
.byte  $FA,$00,$FA,$00
.byte  $EA,$00,$EA,$40	;NEW ROW
.byte  $EA,$80,$EA,$C0	;NEW ROW


;THIS TABLE HAS THE BULLET TYPES THAT THE HERO MAY USE THROUGH THE GAME.
;FOR EACH BULLET TYPE THERE ARE SEVERAL ENTRIES. THEY ARE:
;
;NAME OF ANIMATION
;NAME OF SOUND TO MAKE
;AMOUNT TO LAUNCH DOWN
;PATH LIST TO USE.  1 WORD.  SEE TABLES BELOW THE SOUNDS.
;POWER (1,2, OR 4)
;NUMBER OF 1/15 SECOND INTERVALS TO FREEZE ENEMY WHEN SHOT.
;NUMBER OF HITS HERO CAN TAKE BEFORE NEW WEAPON IS LOST.  0=PERMANENT.
;	BE SURE TO MAKE THE FIRST WEAPON IN EACH WORLD PERMANENT.

BULLETDATA:
		.word 	SIMPLEB 	;ENTRY 0.  SINGLE BULLET, SLOW.
		.word 	HEROGUN
		.byte 	4
		.word 	SLOWLINE
		.byte 	1
		.byte 	2
		.byte 	0

		.word 	DOUBLEB		;ENTRY 1.  FASTER GUN WITH DOUBLE B.
		.word 	HEROGUN		;BUT STILL SINGLE POWER
		.byte 	4
		.word 	FASTLINE
		.byte 	1
		.byte 	2
		.byte 	0

		.word 	BAZOSHOT	;ENTRY 2 FOR MOTORCYCLE
		.word 	CYCLESHOT	;FAST BALL.
		.byte 	5
		.word 	FASTLINE
		.byte 	1
		.byte 	2
		.byte 	0

		.word 	EROSHOT		;ENTRY 3 FOR HOVERCRAFT
		.word 	HOVERSHOT	;FAST ZAP WAVE
		.byte 	10		;WITH MODERATE FREEZE POWER.
		.word 	FASTLINE
		.byte 	2
		.byte 	10		
		.byte 	0

		.word 	DOUBLEB 	;ENTRY 4 FOR HERO'S SPACE SHIP
		.word 	SPACESHOT
		.byte 	4
		.word 	FASTLINE	;FAST WITH NO FREEZE POWER, WEAK.
		.byte 	1
		.byte 	2		
		.byte 	0

		.word 	FREEZEBUL 	;ENTRY 5 FOR FREEZE GUN
		.word 	FREEZESND
		.byte 	4
		.word 	ZIGZAG		;ZIG ZAG, HEAVY FREEZE POWER
		.byte 	1
		.byte 	45
		.byte 	3		;LOOSE IT WITH 3 HITS

		.word 	BUBBLE		;ENTRY 6 FOR BOAT IN SWAMP
		.word 	POWERSND	;FAST BALL WITH LOOP
		.byte 	4
		.word 	LOOP
		.byte 	2
		.byte 	45
		.byte 	0

		.word 	FREEZEBUL 	;ENTRY 7 FOR CIRCLE GUN
		.word 	TURRETSND
		.byte 	4
		.word 	CIRCLING	;CIRCLES ENDLESSLY. MILD FREEZE POWER
		.byte 	1
		.byte 	10
		.byte 	6		;LOOSE IT WITH 6 HITS

		.word 	BUBBLE		;ENTRY 8 FOR SPACE
		.word 	POWERSND	;FAST BALL WITH LOOP
		.byte 	4
		.word 	ZIGZAG
		.byte 	1
		.byte 	45
		.byte 	3

BULLETWIDE	=	10		;WIDTH OF EACH TABLE ENTRY

;THESE SOUNDS ARE FOR THE GUNS.

HEROGUN:
	.byte 	VOICE1,LOADALL,$1F,$85,$BA,$70,PAUSE+N2,ENDPLAY

SPACESHOT:
FREEZESND:
.byte 	VOICE1,LOADALL,$1F,$84,$9D,$70
.byte 	PAUSE+N4,ENDPLAY

CYCLESHOT:
.byte 	VOICE3,LOADALL,$0F,$00,$FF,$0F
.byte 	PAUSE+N4,ENDPLAY

HOVERSHOT:
.byte 	VOICE1,LOADALL,$E0,$84,$00,$01
.byte 	PAUSE+N4,ENDPLAY

;THESE ARE THE BULLET PATH LISTS.  THE LIST CONSISTS OF X,Y MOVEMENTS,
;1 BYTE FOR EACH.  THE BULLET LIST ASSUMES A RIGHT TRAVELING BULLET.
;IT IS REVERSED FOR LEFT TRAVEL AND THE COMPONENTS ARE TRADED FOR
;VERTICAL.  THE LIST SHOULD END WITH A BYTE OF 0.

MAXBDIST	=	64	;MAXIMUM STEPS THROUGH EACH TABLE BULLET WILL
				;TAKE IF IT DOESN'T GO OFF SCREEN.

SLOWLINE:	.byte 	6,0
		.byte 	0

FASTLINE:	.byte 	10,0
		.byte 	0

ZIGZAG:		.byte 	10,10
		.byte 	10,-10
		.byte 	10,-10
		.byte 	10,10
		.byte 	0

LOOP:		.byte 	32,-6
		.byte 	32,6
		.byte 	-6,24
		.byte 	-24,-6
		.byte 	-6,-18
		.byte 	0

;THIS TABLE HAS THE BACKGROUND CHARACTER SET TO USE FOR A GIVEN WORLD.

USE_BCHRS:			
	.byte 	0	;BOOT
	.byte 	0	;PIER A
	.byte 	2	;SWAMP
	.byte 	4	;TECHNOPOLIS A
	.byte 	3	;SPACE
	.byte 	6	;WAREHOUSE A
	.byte 	6	;PIT BULL
	.byte 	1	;TUNNEL
	.byte 	1	;PIT
	.byte 	6	;WAREHOUSE A
	.byte 	1	;PIT
	.byte 	1	;PIT
	.byte 	1	;PIT
	.byte 	1	;PIT
	.byte 	1	;TUNNEL

;THIS TABLE HAS THE SPRITE CHARACTER SET TO USE FOR A GIVEN WORLD. 2 HIGH
;MODE IS NOT SUPPORTED.  THE SPRITE CHARACTER SET MUST BE IN THE SAME
;BANK AS THE BACKGROUND CHARACTER SET BUT THEY MAY OVERLAP.

USE_SCHRS:			;NUMBER OF CHARACTER SET TO USE
	.byte 	1	;WRLD 0  
	.byte 	1	;PIER A
	.byte 	3	;SWAMP
	.byte 	5	;TECH A
	.byte 	3	;SPACE
	.byte 	7	;WARE A
	.byte 	7	;PITBUL
	.byte 	1	;TUNNEL
	.byte 	1	;PIT
	.byte 	7	;WARE A
	.byte 	1	;PIT
	.byte 	1	;PIT
	.byte 	1	;PIT
	.byte 	1	;PIT
	.byte 	1	;TUNNEL

;THIS TABLE HAS THE BACKGROUND PALETTE TO USE FOR A GIVEN WORLD #.

USE_BPAL:			;NAME OF BACKGROUND PALETTE TO USE
	.word 	BOOTPAL  	;BOOT
	.word 	PIERPAL		;PIER A
	.word 	SWAMPP 		;SWMP
	.word 	TECHPAL		;TECH A
	.word 	SPACEBPAL  	;SPAC
	.word 	WAREPAL		;WARE A
	.word 	BULPAL		;PITBULL
	.word 	TUNNLPAL	;TUNNEL
	.word 	TUNNLPAL	;PIT
	.word 	WAREPAL		;WARE A
	.word 	TUNNLPAL	;PIT
	.word 	TUNNLPAL	;PIT
	.word 	TUNLPAL2	;PIT
	.word 	TUNNLPAL	;PIT
	.word 	TUNNLPAL	;TUNNEL

;THIS TABLE HAS THE SPRITE PALETTE TO USE FOR A GIVEN WORLD #.

USE_SPAL:			;NAME OF SPRITE PALETTE TO USE
	.word 	WHITEPAL     	;BOOT
	.word 	PIERSPAL	;PIER A
	.word 	SWAMPS 		;SWMP
	.word 	TECHSPAL	;TECH A
	.word 	SPACESPAL	;SPACE
	.word 	WARESPAL	;WARE A
	.word 	BULSPAL		;PITB
	.word 	PIERSPAL	;TUNNEL
	.word 	TUNNLSPAL	;PIT
	.word 	WARESPAL	;WARE A
	.word 	TUNNLSPAL	;PIT
	.word 	TUNNLSPAL	;PIT
	.word 	TUNNLSPAL	;PIT
	.word 	TUNNLSPAL	;PIT
	.word 	TUNNLSPAL	;TUNNEL

;SOME OF THE TABLES THAT FOLLOW CONTROL THE MOVEMENT OF THE HERO AND
;OTHER CHARACTERS ON SCREEN.  THEY PERTAIN TO JOYSTICK MOVEMENT AND
;GRAVITY AND FRICTION AND LIMITS OF MOVEMENT IN GENERAL.  IN ORDER TO
;UNDERSTAND THESE TABLES, AN UNDERSTANDING OF THE INTENT OF THIS
;STATE MACHINE IN REGARDS TO HERO ORIENTED "HOP, SKIP, AND JUMP" GAMES
;IS HELPFUL.  THE STATE MACHINE WILL DO OTHER TYPES OF GAMES, BUT
;THESE TABLES WERE DESIGNED TO MAKE THE STATE MACHINE BEHAVE ITSELF NICELY
;FOR THESE SPECIFIC CATEGORY OF GAMES.

;THE GAME "SUPER MARIO" IS BASICALLY A TWO DIMENSIONAL GAME.  MARIO
;CAN GO HORIZONTALLY OR VERTICALLY.  THIS STATE MACHINE EASILY SUPPORTS
;THAT THROUGH THE USE OF GRAVITY AND SOLID CHARACTER DEFFINITIONS.
;BUT IT ALSO SUPPORTS A "THREE DIMENSIONAL ZONE".  THIS ZONE SHOULD BE
;LAYED OUT AT ONE PLACE ON THE SCREEN SORT OF LIKE A ROAD THAT IS VIEWED
;FROM A 45 DEGREE ANGLE.  WHILE THE HERO'S FEET ARE ON THIS ROAD 
;HE WILL WALK AT AN ANGLE THAT SUGGESTS HE IS WALKING HORIZONTALLY OR 
;VERTICALLY WITH RESPECT TO THIS ROAD.  BUT HE SHOULD ALSO BE ABLE TO
;JUMP UP AND RETURN TO HIS RELATIVE POSITION ON THE ROAD AS WELL AS
;DEVIATE FROM THIS 3D AREA AND GO INTO A MARIO 2D MODE ON A WALL BEHIND
;THE ROAD.  THIS 3D ZONE IS SUPPORTED AS A "NO GRAVITY" REGION.  WITHIN
;THIS REGION, GRAVITY WILL NOT EFFECT THE HERO.  THEN IT IS UP TO THE
;PERSON SETTING THE MOMENTUM TABLES TO MAKE THE HEROS MOVEMENTS BE LOGICAL
;WITH RESPECT TO THE PERSPECTIVE HE HAS DESIGNED.  FOR BEST UNDERSTANDING
;OF THIS, SEE THE GAME "RAID 2020" WHICH WAS MADE WITH THIS STATE MACHINE.
;THE FINAL COMMENT I NEED TO ADD IS THAT WHEN THE HERO RUNS TOWARDS
;THE TOP OF THE NO GRAVITY REGION, AT THAT EXACT JUNCTURE HIS Y MOMENTUM
;WILL BE SET TO 0 SO THAT HE DOESN'T RUN UP THE SIDE OF THE WALL BEHIND THAT
;REGION.  IF HE THEN JUMPS AT THAT POINT HE CAN ACT NORMALLY AND GRAVITY
;WILL PULL HIM DOWN.   WHEN HE JUMPS WITHIN THE NO GRAVITY REGION, A
;VARIABLE TEMPORARILY ENABLING GRAVITY, BUT ONLY FOR THE AMOUNT OF THE
;JUMP IS SET.  THIS THEN MAKES HIM FALL BACK TO THE POINT WITHIN THE 3D
;AREA THAT HE JUMPED FROM.


;THIS TABLE SPECIFIES A SCREEN VERTICAL RANGE IN WHICH GRAVITY WILL NOT
;BE APPLIED TO THE HERO OR TO ENEMIES SUBJECT TO GRAVITY.  THIS CAN BE USED
;IN A "THREE DIMENSIONAL" WORLD.  FOR INSTANCE, THERE MIGHT BE A ROAD RUNNING
;ACROSS THE SCREEN AND YOU WANT THE CHARACTER TO BE ABLE TO WALK ON THAT
;ROAD FREELY.  SOMETIMES YOU WANT A "TWO DIMENSIONAL" WORLD.  IN THIS CASE,
;PUT THE NON-GRAVITY RANGE AT THE EXTREME BOTTOM OF THE WORLD ($FF,$FF)
;SO THAT IT WON'T BE ENCOUNTERED.  THE TABLE HAS 2 BYTES FOR EACH WORLD
;(BOOT SCREEN IS WORLD 0).  THE FIRST IS THE TOP SCAN LINE OF THE RANGE,
;THE SECOND IS THE BOTTOM.  THE SCAN LINES REFER TO THE BACKGROUND, NOT
;THE ACTUAL SCAN LINE ON THE TV WHICH WILL BE MOVED DOWN TO CENTER THE IMAGE.

;CHARACTERS SUBJECT TO GRAVITY (THE HERO, ENEMIES WHO RESPOND TO GRAVITY)
;WILL HAVE THEIR VERTICAL MOMENTUM SET TO ZERO WHEN THEY HIT THE TOP
;OF THIS NO GRAVITY REGION.  THE NO GRAVITY REGION SHOULD BE PUT AT THE
;BOTTOM OF THE SCREEN AGAINST THE BOTTOM SCREEN LIMIT (YOU SHOULD NOT
;TRY TO PUT A NO GRAVITY REGION IN THE MIDDLE).

NOGRAVITY:
	.byte 	0,255		;BOOT
	.byte 	144,255		;PIER 
	.byte 	0,255		;SWAMP
	.byte 	160,255		;TECH 
	.byte 	0,255		;SPACE
	.byte 	160,255		;WARE 
	.byte 	128,255		;PITBULL
	.byte 	255,255		;TUNNEL
	.byte 	255,255		;PIT
	.byte 	160,255		;WARE 
	.byte 	255,255		;PIT
	.byte 	255,255		;PIT
	.byte 	255,255		;PIT
	.byte 	255,255		;PIT
	.byte 	255,255		;TUNNEL

;THIS TABLE ALLOWS YOU TO LIMIT THE HERO OR ENEMIES VERTICAL LOCATION ON
;SCREEN WITHOUT HAVING TO PUT ROWS OF SOLID IN THEIR WAY.   THERE ARE
;2 VALUES FOR EACH WORLD.  THE FIRST BYTE IS THE TOPMOST SCAN LINE WITHIN
;THE BACKGROUND THAT WILL BE ALLOWED (USE 0 TO DISABLE THIS).  THE
;SECOND IS THE BOTTOMMOST (USE -1 TO DISABLE THIS).  THE HERO'S HEAD (TOP)
;WILL NOT BE ALLOWED TO GO ABOVE THE TOP AND HIS FEED (BOTTOM) WILL NOT
;BE ALLOWED TO GO BELOW THE BOTTOM.

SCREENLIMITS:
	.byte 	0,255		;BOOT
	.byte 	0,191		;PIER A
	.byte 	0,198		;SWAMP
	.byte 	0,191		;TECH A
	.byte 	0,200		;SPACE
	.byte 	0,191		;WARE A
	.byte 	0,200		;PITBULL
	.byte 	0,128		;TUNNEL
	.byte 	0,255		;PIT
	.byte 	0,191		;WARE A
	.byte 	0,255		;PIT
	.byte 	0,255		;PIT
	.byte 	0,255		;PIT
	.byte 	0,255		;PIT
	.byte 	0,128		;TUNNEL

;THIS TABLE SPECIFIES THE EFFECTS THAT THE LEFT, RIGHT, UP AND DOWN ARROW
;KEYS WILL HAVE ON THE HERO'S X TRAVEL AND Y TRAVEL MOMENTUM IN EACH
;WORLD.  FOR EACH WORLD THERE ARE 8 BYTES.  EACH BYTE IS A SIGNED
;VALUE FOR THE AMOUNT TO ADD TO A PARTICULAR MOMENTUM VALUE.  YOU
;SHOULD NOT SET THESE AMOUNTS TOO LARGE OR THE KEY WILL HAVE ALMOST
;NO CONTROL.  THE BYTES ARE:

; LEFTX, LEFTY, RIGHTX, RIGHTY, UPX, UPY, DOWNX, DOWNY

;+ VALUES ARE RIGHT AND DOWN.  - VALUES ARE UP AND LEFT.  

;THE MAX VALUE FOR THIS TABLE IS $40.  THE NEGATIVE VALUE MAY
;BE $FF DOWN TO $B0

MOMENTUMS:
	.byte 	$00,$00,$00,$00,$00,$00,$00,$00	;BOOT
	.byte 	$FC,$00,$04,$00,$FC,$FC,$04,$04	;PIER A
	.byte 	$FA,$00,$06,$00,$00,$FA,$00,$06	;SWAMP
	.byte 	$FC,$00,$04,$00,$FC,$FC,$04,$04	;TECH A
	.byte 	$F0,$00,$10,$00,$00,$F0,$00,$10	;SPACE
	.byte 	$FC,$00,$04,$00,$FC,$FC,$04,$04	;WARE A
	.byte 	$FC,$00,$04,$00,$FC,$FC,$04,$04	;PITBULL
	.byte 	$FC,$00,$04,$00,$FC,$FC,$04,$04	;TUNNEL
	.byte 	$FC,$00,$04,$00,$FC,$FC,$04,$04	;PIT
	.byte 	$FC,$00,$04,$00,$FC,$FC,$04,$04	;WARE A
	.byte 	$FC,$00,$04,$00,$FC,$FC,$04,$04	;PIT
	.byte 	$FC,$00,$04,$00,$FC,$FC,$04,$04	;PIT
	.byte 	$FC,$00,$04,$00,$FC,$FC,$04,$04	;PIT
	.byte 	$FC,$00,$04,$00,$FC,$FC,$04,$04	;PIT
	.byte 	$FC,$00,$04,$00,$FC,$FC,$04,$04	;TUNNEL
		   
;THIS TABLE CONTROLS INERTIA FOR THE HERO'S MOVEMENTS.  WHEN THE HERO
;DESIRES TO COMPLETELY REVERSE DIRECTION, THIS TABLE IS USED TO DECIDE
;IF HIS DIRECTION MOMENTUM CHANGE WILL BE INSTANT OR GRADUAL.  IF YOU
;PUT $80 HERE THE CHANGE WILL NOT TAKE PLACE AND THE NORMAL MOMENTUM WILL
;SIMPLY BE ADDED.  IF YOU PUT ANY OTHER VALUE HERE, THIS MUCH MOMENTUM WILL
;REPLACE WHATEVER IS CURRENTLY THERE (THE SIGN WILL BE ADJUSTED TO MATCH
;THE SIGN THAT THE KEY ATTEMPTS TO CREATE).  THEN THE VALUE ASSOCIATED
;WITH THE PROPER KEY WILL BE ADDED TO THIS VALUE.

;THE FIRST BYTE IS THE INERTIA VALUE FOR THE X AXIS, THE SECOND FOR THE Y.

INERTIA:
	.byte 	24,24		;BOOT
	.byte 	24,24		;PIER A
	.byte 	24,24		;SWAMP
	.byte 	24,24		;TECH A
	.byte 	24,24		;SPACE
	.byte 	24,24		;WARE A
	.byte 	24,24		;PITBULL
	.byte 	24,24		;TUNNEL
	.byte 	24,24		;PIT
	.byte 	24,24		;WARE A
	.byte 	24,24		;PIT
	.byte 	24,24		;PIT
	.byte 	24,24		;PIT
	.byte 	24,24		;PIT
	.byte 	24,24		;TUNNEL

;THIS TABLE HAS THE SOLID CHARACTER VALUE TO USE FOR ENEMIES IN A GIVEN
;WORLD.  THE HERO HAS HIS OWN VALUES IN HEROTABLE SINCE HE CAN CHANGE AT
;WILL.

USE_SOLID:			;LO AND HIGH SOLID VALUES FOR CHR SET
	.byte 	$00	;BOOT
	.byte 	$FD	;PIER 
	.byte 	$00	;SWMP
	.byte 	$FD	;TECH 
	.byte 	$00	;SPACE
	.byte 	$FD	;WARE 
	.byte 	$00	;PITBUL
	.byte 	$80	;TUNNEL
	.byte 	$80	;PIT
	.byte 	$FD	;WARE 
	.byte 	$80	;PIT
	.byte 	$80	;PIT
	.byte 	$80	;PIT
	.byte 	$80	;PIT
	.byte 	$80	;TUNNEL

;THIS TABLE SPECIFIES THE Y DIRECTION GRAVITY FOR ENEMIES IN A GIVEN WORLD.  
;IT IS USED WHEN THE ENEMYOPTS FLAG SPECIFIES AN ENEMY USES GRAVITY.  UNLIKE
;THE HERO, THERE CAN BE NO X DIRECTION GRAVITY FOR AN ENEMY.

GRAVITY:	
	.byte 	0		;BOOT
	.byte 	16		;PIER A
	.byte 	0		;SWAMP
	.byte 	16		;TECH A
	.byte 	0		;SPACE
	.byte 	16		;WARE A
	.byte 	16		;PITBULL
	.byte 	16		;TUNNEL
	.byte 	16		;PIT
	.byte 	16		;WARE A
	.byte 	16		;PIT
	.byte 	16		;PIT
	.byte 	16		;PIT
	.byte 	16		;PIT
	.byte 	16		;TUNNEL

;THIS TABLE CONTAINS THE MUSIC TO USE FOR A GIVEN WORLD.  THERE IS NO
;MUSIC FOR INSTRUCTIONS WORLDS.  THE MUSIC IS ASSUMED TO BE 2 STRUCTURES.
;USE DUMMYEND IF YOU DON'T WANT TO USE 2.  TYPICALLY YOU WILL USE
;VOICE 0 AND VOICE 1 BUT THIS IS NOT MANDITORY.  IF YOU DON'T WANT TO
;USE 2 TRACKS, SET THE SECOND TO "NOSOUND".

USE_MUSIC:			
	.word 	OPENMU1,OPENMU2		;BOOT
	.word 	THEME1,NOSOUND	 	;PIER 
	.word 	THEME1,NOSOUND		;SWAMP
	.word 	THEME1,NOSOUND	 	;TECHNOPOLIS 
	.word 	THEME1,NOSOUND		;SPACE
	.word 	THEME1,NOSOUND		;5 WAREHOUSE
	.word 	THEME1,NOSOUND		;6 PIT BULL
	.word 	THEME1,NOSOUND		;7 TUNNEL
	.word 	THEME1,NOSOUND		;8 BAT PIT
	.word 	THEME1,NOSOUND		;9 WAREHOUSE WHEN LEAVING PITS
	.word 	THEME1,NOSOUND		;10 BUG PIT WITHIN LONG TUNNEL
	.word 	THEME1,NOSOUND		;11 TUNNELS PIT
	.word 	THEME1,NOSOUND		;12 TUNNELS PIT
	.word 	THEME1,NOSOUND		;13 PIT WITH BUG WITH KEY
	.word 	THEME1,NOSOUND		;14 TUNNEL SECOND PART

NOSOUND:	.byte 	ENDPLAY

;***************** INSTRUCTIONS SCREENS (WORLDS) INFO ********************

;THESE ARE THE INSTUCTIONS SCREENS.  INSTRUCTION SCREENS ARE INTENDED
;TO BE CUSTOM PROGRAMMING ACCORDING TO THE GAME'S NEEDS.  INSTRUCTIONS
;WORLDS ARE THOSE NUMBERED $80 TO $FE.  WHEN ENCOUNTERED, THE
;SPECIAL CODE FOR THESE WORLDS IS ENTERED IN THE USER_MAINLINE ROUTINE
;IN STATE.ASM.  THERE THE DECISION IS MADE AS TO WHAT TO DO WITH THE
;DATA.  THE TABLE BELOW SHOULD BE THE PRIMARY DATA TABLE FOR THIS LOGIC.
;THE CHEAT MODE LOGIC ALSO LOOKS AT THIS TABLE, BUT ONLY TO FIND THE
;NULL POINTER THAT MARKS THE END.

;THE FORMAT OF THIS TABLE IS:  1 WORD POINTER TO THE INSTRUCTIONS DATA.
;THE TABLE MUST END WITH A NULL.

;A SPECIAL INSTRUCTIONS WORLD MUST ALWAYS BE PRESENT.  IT IS THE GAME 
;OVER WORLD.  IT SHOULD STATE THE A+START=CONTINUE PLUS WHATEVER ELSE
;YOU WANT.  THE VARIABLE BELOW DEFINES ITS NUMBER.  IT SHOULD BE FOLLOWED
;BY THE BOOT WORLD (-1) IN THE TABLE NEXT_WORLD.

OVER_WORLD	=	$88		;INSTRUCTIONS WORLD TO USE FOR GAME OVER.

INSTTIME	=	5		;~1 SECONDS COUNT TO DISPLAY INSTRUCTIONS. 
WINTIME		=	10		;~1 SECONDS COUNT TO DISPLAY WINWORLD.
WINWORLD	=	$87		;INSTRUCTIONS WORLD FOR WHEN WE WIN.

USE_INST:	 
	.word 	SCMSG		;80 BOOT STORY
	.word 	PIERBRIEF	;81 BRIEFING BEFORE PIER SCENE
	.word 	BOATBRIEF	;82 BRIEFING BEFORE SWAMP SCENE
	.word 	TECHBRIEF	;83 BRIEFING BEFORE TECHNOPOLIS
	.word 	FBIBRIEF	;84 BRIEFING BEFORE SPACE SCENE
	.word 	SPACEBRIEF	;85 BRIEFING BEFORE WAREHOUSE
	.word 	BULLINST 	;86 INSTRUCTIONS WHEN YOU ENTER PITBULL
	.word 	ENDMSG		;87. MESSAGE AFTER EXPLODING THE COMPUTER
	.word 	GAME_OVER	;88. FOR GAME OVER
	.word 	PIERALL		;89. PLAYER DIDN'T GET ALL PIER ENEMIES
	.word 	TECHALL		;8A. PLAYER DIDN'T GET ALL TECH ENEMIES
	.word 	SWAMPALL	;8B. PLAYER DIDN'T GET ALL SWAMP STUFF

MAX_INST	=	$8C		;FIRST ILLEGAL INST WORLD # FOR CHEAT MODE


;THIS TABLE HAS THE CHARACTER SET TO USE WITH AN INSTRUCTIONS WORLD.

INST_SET:
	.byte 	2
	.byte 	2
	.byte 	2
	.byte 	2
	.byte 	2
	.byte 	2
	.byte 	2
	.byte 	2
	.byte 	2
	.byte 	2
	.byte 	2
	.byte 	2

INST_PAL:
	.word 	WHITEPAL
	.word 	BRIEFPAL
	.word 	BRIEFPAL
	.word 	BRIEFPAL
	.word 	BRIEFPAL
	.word 	BRIEFPAL
	.word 	BRIEFPAL
	.word 	WHITEPAL
	.word 	BRIEFPAL
	.word 	BRIEFPAL
	.word 	BRIEFPAL
	.word 	BRIEFPAL

;THIS TABLE HAS THE WORLD TO FOLLOW THE INSTRUCTIONS WITH.  1 BYTE.

NEXT_WORLD:
	.byte 	$81	;STORYLINE GOES TO PIER BRIEFING
	.byte 	$01	;PIER BRIEFING GOES TO PIER
	.byte 	$02	;BOATHOUSE BRIEFING AT PIER END GOES TO SWAMP
	.byte 	$03	;BRIEFING IN GUN SHOP GOES TO TECHNOPOLIS
	.byte 	$04	;BRIEFING AT TECHNOPOLIS FBI OFFICE GOES TO SPACE
	.byte 	$05	;BRIEFING AT SPACE STATION GOES TO WAREHOUSE
	.byte 	$06	;BRIEFING BEFORE PITBULL'S DEN GOES TO PITBULL
	.byte 	$FF	;END OF GAME STARTS OVER
	.byte 	$FF	;GAME OVER STARTS OVER
	.byte 	$FF	;THIS ONE IS NOT A REAL INST WORLD. FF FOR ERROR REC.
	.byte 	$FF	;THIS ONE IS NOT A REAL INST WORLD. FF FOR ERROR REC.
	.byte 	$FF	;THIS ONE IS NOT A REAL INST WORLD. FF FOR ERROR REC.
	
;THIS TABLE HAS THE MUSIC TO USE FOR EACH INSTRUCTIONS WORLD IF ANY.  
;NULL MEANS NONE.  TABLE FORMAT IS SAME AS USE_MUSIC

INST_MUSIC:
	.word 	0,0
	.word 	0,0
	.word 	0,0
	.word 	0,0
	.word 	0,0
	.word 	0,0
	.word 	0,0
	.word 	OPENMU1,OPENMU2
	.word 	GAMEEND1,GAMEEND2
	.word 	0,0
	.word 	0,0
	.word 	0,0

;THESE 2 SONGS ARE THE GAME OVER MUSIC.

GAMEEND1:
		.byte 	VOICE1, HIGH_STRING,PAUSE+N1
		.byte 	Eb+N8, PAUSE+N8, Ab+N16, Bb+N16, Fs+N16, Ab+N16, Eb+N2, ENDPLAY

GAMEEND2:
		.byte 	VOICE0, BASE_STRING,PAUSE+N1
		.byte 	LEb+N8, PAUSE+N8, LAb+N16, LBb+N16, LFs+N16, LAb+N16, LEb+N2, ENDPLAY

;********************* MESSAGES AREA **********************************

;THIS TEXT STRING WILL MOVE THE "CURSOR" TO THE APROXIMATE CENTER SCREEN
;ROW.
;This should be at data point $28CF - Evenball
CENTERTEXT:
	.byte 	$0C,$0D,$0D,$0D,$0D,$0D,$0D,0

;THESE MESSAGE BOXES ARE USED FOR RAID 2020.  IF THE MESSAGE DATA STARTS
;WITH A CLEAR SCREEN ($0C) THEN THE MESSAGE IS INTENDED TO FILL THE
;SCREEN BY ITSELF.  IF THE MESSAGE DOES NOT BEGIN WITH $0C, ITS A 
;MESSAGE BOX FOR THE BRIEFING SCREEN.
;$28DA in the rom
GAME_OVER:	.byte 	"   GAME OVER    "
		.byte 	"                "
		.byte 	"LOOKS LIKE YOU  "
		.byte 	"HAVE LOST THIS  "
		.byte 	"TIME SHADOW",$27,"    "
		.byte 	"                "
		.byte 	"PRESS A ALONG   "
		.byte 	"WITH START TO   "
		.byte 	"CONTINUE",$27," TEN   "
		.byte 	"CONTINUES MAX",$27,"  "
		.byte  	0

PIERALL:	.byte 	"GOOD JOB SHADOW",$27
		.byte 	"DRUG TRAFFICKING"
		.byte 	"ACTIVITY HAS    "
		.byte 	"DECREASED",$27,$27,$27," BUT"
		.byte 	"THE PIER IS     "
		.byte 	"STILL INFESTED  "
		.byte 	"WITH DEALERS",$27,"   "
		.byte 	"GO SAVE OUR     "
		.byte 	"PIER",$25,"           "
		.byte 	"       ",$24,"CONTROL "
		.byte  	0

TECHALL: 	.byte 	"JUST WHEN YOU   "
		.byte 	"THOUGHT IT WAS  "
		.byte 	"OVER",$27,$27,$27,"         "
		.byte 	"                "
		.byte 	"THE CYBORGS HAVE"
		.byte 	"COME BACK IN    "
		.byte 	"FORCE",$25," MAKE SURE"
		.byte 	"YOU DESTROY ALL "
		.byte 	"OF THEM THIS    "
		.byte 	"TIME",$27,$27,$27,"         "
		.byte  	0

SWAMPALL:	.byte 	"YOU HAVE NOT    "
		.byte 	"SAFEGUARDED     "
		.byte 	"THE SWAMP JUST  "
		.byte 	"YET",$27," BE SURE TO "
		.byte 	"DESTROY ALL OF  "
		.byte 	"PITBULL",$28,"S EVIL  "
		.byte 	"CHOPPER FORCE   "
		.byte 	"AND SIEZE DRUGS "
		.byte 	"WHEN YOU CAN",$27,"   "
		.byte 	"      ",$24,"CONTROL  "
		.byte  	0

SCMSG:		;BOOT UP STORY LINE

		.byte 	$0C,$0D
		.byte 	"    A",$27,"D",$27,"2020",$27," A PLAGUE OF",$0D
		.byte 	$0D
		.byte 	"   NARCOTICS TRANSCENDING",$0D
		.byte 	$0D
		.byte 	"    THE BOUNDS OF RACE",$26,$0D
		.byte 	$0D
		.byte 	"   ECONOMY",$26," AND TIME HAVE",$0D
		.byte 	$0D
		.byte 	"   PUT A STRANGLE HOLD ON",$0D
		.byte 	$0D
		.byte 	"  AMERICA",$27," YOU MUST DESTROY",$0D
		.byte 	$0D
		.byte 	"  PITBULL",$26," THE DRUG KINGPIN",$0D
		.byte 	$0D
		.byte 	"WHO HAS BECOME THE OVERLORD",$0D
		.byte 	$0D
		.byte 	"  OF THIS SINISTER EMPIRE",$27,$0D
		.byte 	$0D
		.byte 	$0D		
		.byte 	"      YOU",$26," SHADOW",$26," ARE",$0D
		.byte 	$0D
		.byte 	"     THE LAST HOPE ",$27,$27,$27,0

PIERBRIEF:	.byte 	"MISSION BRIEFING"
		.byte 	"                "
		.byte 	"YOU MUST RID    "
		.byte 	"THE PIER OF ALL "
		.byte 	"DRUG DEALERS",$27,"   "
		.byte 	"GET TO THE BOAT "
		.byte 	"SHOP TO ESCAPE",$27," "
		.byte 	"                "
		.byte 	"      ",$24,"CONTROL  "
		.byte 	"                "
		.byte  	0


BOATBRIEF: 	.byte 	"  NEXT MISSION  "
		.byte 	"                "
		.byte 	"DEFEAT PITBULL",$28,"S"
		.byte 	"HELICOPTERS",$27," A  "
		.byte 	"BACKUP BOAT IS  "
		.byte 	"HIDDEN IN THE   "
		.byte 	"SMALL DOCK",$27,"     "
		.byte 	"SIEZE DRUGS IF  "
		.byte 	"YOU CAN",$27,"        "
		.byte 	"       ",$24,"CONTROL "
		.byte  	0

TECHBRIEF:	
		.byte 	"WAY TO GO ACE",$25,"  "
		.byte 	"                "
		.byte 	"TECHNOPOLIS     "
		.byte 	"NEEDS YOUR HELP",$25
		.byte 	"                "
		.byte 	"ELIMINATE ALL   "
		.byte 	"CYBORG DRUG     "
		.byte 	"TRANSPORTERS",$27,"   "
		.byte 	"                "
		.byte 	"       ",$24,"CONTROL "
		.byte 	0

FBIBRIEF:	.byte 	"WELL DONE",$25,"      "
		.byte 	"                "
		.byte 	"PILOT THE CZAR 1"
		.byte 	"SHIP TO NEW     "
		.byte 	"L",$27,"A",$27," AND FIND   "
		.byte 	"PITBULL",$27,"YOU MUST"
		.byte 	"DESTROY HIS DRUG"
		.byte 	"SATELLITE ON    "
		.byte 	"THE WAY",$27,"        "
		.byte 	"        ",$24,"CONTROL"
		.byte 	0

SPACEBRIEF:	.byte 	"PITBULL AWAITS",$25," "
		.byte 	"                "
		.byte 	"YOU MUST FIND   "
		.byte 	"THE COMPUTER    "
		.byte 	"CARD AND KEY TO "
		.byte 	"ALLOW ENTRY TO  "
		.byte 	"PITBULL",$28,"S EVIL  "
		.byte 	"HITECH CENTER",$27,"  "
		.byte 	"                "
		.byte 	"       ",$24,"CONTROL "
		.byte 	0

BULLINST:	.byte 	"THE END IS NEAR",$26
		.byte 	"AHEAD LIES THE  "
		.byte 	"FINAL CHALLENGE",$27
		.byte 	"                "
		.byte 	"ONLY PITBULL",$28,"S  "
		.byte 	"COMPUTER CARD   "
		.byte 	"CAN DESTROY THE "
		.byte 	"CONTROL CENTER",$27," "
		.byte 	"YOU MUST DESTROY"
		.byte 	"HIM TO GET IT",$27,$27,$27
		.byte 	0

ENDMSG:	     	.byte 	$0C
		.byte 	$0D
		.byte 	$0D
		.byte 	$0D
		.byte 	$0D
		.byte 	"    CONGRATULATIONS SHADOW",$25,$0D
		.byte 	$0D
		.byte 	"      YOU HAVE OVERCOME",$0D
		.byte 	"    TREACHEROUS OBSTACLES",$0D
		.byte 	"   AND DESTROYED PITBULLS",$0D
		.byte 	"      EVIL DRUG EMPIRE",$27,$0D
		.byte 	"  YOUR SUCCESS WILL CARRY",$0D
		.byte 	"  US INTO A NEW HEIGHT IN",$0D
		.byte 	"  OUR FIGHT AGAINST DRUGS",$27,$0D
		.byte 	"  REMEMBER",$26,$0D
		.byte 	"     WINNERS NEED NO DRUGS",$27,$0D
		.byte 	$0D
		.byte 	"        RAID 2020 ",$0D
		.byte 	"          IS A",$0D
		.byte 	"      WAUNG AND BURKE",$0D
		.byte 	"        PRODUCTION",0


;THIS IS THE SOUND ASSOCIATED WITH A GIVEN COMMAND.  SOME COMMANDS DO NOT
;HAVE SOUNDS AND THEY CAN BE SET TO DUMMYEND.
;$3194 in the retail rom
SND_TAB:			;SOUNDS TO USE
	.word 	DUMMYEND	;CMD 0
	.word 	PRIZE_SND
	.word 	PRIZE_SND
	.word 	DUMMYEND
	.word 	BOOM
	.word 	WATER_SND
	.word 	DUMMYEND
	.word 	DUMMYEND
	.word 	DUMMYEND	;CMD 8
	.word 	DUMMYEND
	.word 	FALLING
	.word 	DUMMYEND
	.word 	DUMMYEND
	.word 	ELEV_BUTTON
	.word 	ELEV_BUTTON
	.word 	DUMMYEND
	.word 	METAL_BOING		;CMD $10
	.word 	METAL_BOING
	.word 	METAL_BOING
	.word 	METAL_BOING
	.word 	DUMMYEND
	.word 	DUMMYEND
	.word 	BOOM   
	.word 	METAL_BOING
	.word 	METAL_BOING	;CMD $18
	.word 	WATER_SND
	.word 	DUMMYEND
	.word 	DUMMYEND
	.word 	DUMMYEND
	.word 	DUMMYEND
	.word 	DUMMYEND
	.word 	DUMMYEND
	.word 	DUMMYEND	;20
	.word 	DUMMYEND
	.word 	DUMMYEND
	.word 	DUMMYEND
	.word 	DUMMYEND
	.word 	DUMMYEND
	.word 	DUMMYEND
	.word 	DUMMYEND
	.word 	DUMMYEND
	.word 	FALLING
	.word 	PRIZE_SND	;2A. PRIZES
	.word 	BOOM
	.word 	DUMMYEND
	.word 	DUMMYEND
	.word 	DUMMYEND
	.word 	DUMMYEND
	.word 	DUMMYEND	;30
	.word 	DUMMYEND
	.word 	DUMMYEND
	.word 	DUMMYEND
	.word 	DUMMYEND
	.word 	DUMMYEND
	.word 	DUMMYEND
	.word 	DUMMYEND
	.word 	DUMMYEND

PAUSENOISE:
ELEV_BUTTON:
.byte 	VOICE3,LOADALL,$04,$00,$83,$08
.byte 	PAUSE+N4,ENDPLAY

FALLING:
	.byte 	VOICE1,LOADALL,$1F,$96,$40,$40,PAUSE+N2,ENDPLAY

WATER_SND:
.byte 	VOICE3,LOADALL,$33,$74,$76,$70
.byte 	PAUSE+N2,ENDPLAY

METAL_BOING:	
.byte 	VOICE3,LOADALL,$88,$40,$8A,$0D
.byte 	PAUSE+N8,ENDPLAY

DUMMYEND:	.byte 	ENDPLAY

;THESE ARE SOUND EFFECTS THAT ARE GAME SPECIFIC.

TTYSND:
		.byte 	VOICE0, HIGH_STRING
		.byte 	C+N16, ENDPLAY

THEME1:
.byte 	VOICE0,BASE_PIANO
.byte 	LC+N8,HC+N8,Eb+N8,LC+N8,HC+N8,Eb+N8,LC+N8,F+N16,F+N16
.byte 	LC+N8,HC+N8,Eb+N8,LC+N8,HC+N8,Eb+N8,LC+N8,F+N16,F+N16
.byte 	LF+N8,F+N8,Ab+N8,LF+N8,F+N8,Ab+N8,F+N16,F+N16,Bb+N16,Bb+N16
.byte 	LF+N8,F+N8,Ab+N8,LF+N8,F+N8,Ab+N8,F+N16,F+N16,Bb+N16,Bb+N16
.byte 	LC+N8,HC+N8,Eb+N8,LC+N8,HC+N8,Eb+N8,LC+N8,F+N16,F+N16
.byte 	LG+N8,G+N8,Bb+N8,LG+N8,G+N8,Bb+N8,LG+N8,Eb+N8,LF+N8,HF+N8,Ab+N8
.byte 	LF+N8,HF+N8,Ab+N8,F+N16,F+N16,Bb+N16,Bb+N16
.byte 	LG+N8,G+N8,Bb+N8,LG+N8,G+N8,Bb+N8,LG+N8,Eb+N8,LF+N8,HF+N8,Ab+N8
.byte 	LF+N8,HF+N8,Ab+N8,F+N16,F+N16,Bb+N16,Bb+N16
.byte 	REPLAY 

;THEME2:
;.byte 	VOICE0,BASE_ARCADE
;.byte 	LD+N16,LD+N16,HD+N16,LD+N16,LD+N16,HD+N16,LD+N16,HD+N16,LD+N16,LD+N16
;.byte 	HD+N16,LD+N16,LD+N16,HD+N16,LD+N16,HD+N16
;.byte 	LD+N16,LD+N16,HD+N16,LD+N16,LD+N16,HD+N16,LD+N16,HD+N16,LD+N16,LD+N16
;.byte 	HD+N16,LD+N16,LD+N16,HD+N16,LD+N16,HD+N16
;.byte 	LC+N16,LC+N16,HC+N16,LC+N16,LC+N16,HC+N16,LC+N16,HC+N16,LC+N16,LC+N16
;.byte 	HC+N16,LC+N16,LC+N16,HC+N16,LC+N16,HC+N16
;.byte 	LC+N16,LC+N16,HC+N16,LC+N16,LC+N16,HC+N16,LC+N16,HC+N16,LC+N16,LC+N16
;.byte 	HC+N16,LC+N16,LC+N16,HC+N16,LC+N16,HC+N16
;.byte 	LA+N16,LA+N16,Ax+N16,LA+N16,LA+N16,Ax+N16,LA+N16,Ax+N16,LA+N16,LA+N16
;.byte 	Ax+N16,LA+N16,LA+N16,Ax+N16,LA+N16,Ax+N16
;.byte 	LA+N16,LA+N16,Ax+N16,LA+N16,LA+N16,Ax+N16,LA+N16,Ax+N16,LA+N16,LA+N16
;.byte 	Ax+N16,LA+N16,LA+N16,Ax+N16,LA+N16,Ax+N16
;.byte 	LF+N16,LF+N16,HF+N16,LF+N16,LF+N16,HF+N16,LF+N16,HF+N16,LF+N16,LF+N16
;.byte 	HF+N16,LF+N16,LF+N16,HF+N16,LF+N16,HF+N16
;.byte 	LG+N16,LG+N16,G+N16,LG+N16,LG+N16,G+N16,LG+N16,G+N16,LG+N16,LG+N16
;.byte 	G+N16,LG+N16,LG+N16,G+N16,LG+N16,G+N16
;.byte 	LA+N16,LA+N16,Ax+N16,LA+N16,LA+N16,Ax+N16,LA+N16,Ax+N16,LA+N16,LA+N16
;.byte 	Ax+N16,LA+N16,LA+N16,Ax+N16,LA+N16,Ax+N16
;.byte 	Ax+N8,Ax+N8,Ax+N8,Ax+N8,Ax+N8,Ax+N8,Ax+N8,Ax+N8,REPLAY

THEME3:
;.byte 	VOICE0,BASE_STRING
;.byte 	LC+N8,PAUSE+N4,LC+N8,PAUSE+N4,Eb+N8,LF+N8
;.byte 	LC+N8,PAUSE+N4,LC+N8,PAUSE+N4,Eb+N8,LF+N8
;.byte 	LF+N8,PAUSE+N4,LF+N8,PAUSE+N4,LEb+N16,LEb+N16,LEb+N16,LEb+N16
;.byte 	LF+N8,PAUSE+N4,LF+N8,PAUSE+N4,LEb+N16,LEb+N16,LEb+N16,LEb+N16
;.byte 	LC+N8,PAUSE+N4,LC+N8,PAUSE+N4,Eb+N8,LF+N8
;.byte 	LF+N8,PAUSE+N4,LF+N8,PAUSE+N4,LEb+N16,LEb+N16,LEb+N16,LEb+N16
;.byte 	LEb+N16,LEb+N16,LEb+N16,LEb+N16,LEb+N16,LEb+N16,LEb+N16,LEb+N16
;.byte 	C+N16,C+N16,C+N16,C+N16,C+N16,C+N16,C+N16,C+N16
;.byte 	LF+N16,LF+N16,LF+N16,LF+N16,LF+N16,LF+N16,LF+N16,LF+N16
;.byte 	Eb+N16,Eb+N16,Eb+N16,Eb+N16,Eb+N16,Eb+N16,Eb+N16,Eb+N16
;.byte 	REPLAY

OPENMU1:  	.byte 	VOICE1,BASE_HARPSI        
		.byte 	LC+N1,LC+N1,LEb+N1,LEb+N1,LC+N1,LC+N1
		.byte 	LC+N8,LC+N8,LC+N8,LC+N8,LC+N8,LC+N8,LC+N8
		.byte 	LC+N16,LC+N16
		.byte 	LC+N8,LC+N8,LC+N8,LC+N8,LC+N8,LC+N8,LC+N8
		.byte 	LC+N16,LC+N16

 		.byte 	LEb+N8,LEb+N8,LEb+N8,LEb+N8,LEb+N8,LEb+N8,LEb+N8
		.byte 	LEb+N16,LEb+N16
 		.byte 	LEb+N8,LEb+N8,LEb+N8,LEb+N8,LEb+N8,LEb+N8,LEb+N8
		.byte 	LEb+N16,LEb+N16

		.byte 	LC+N8,LC+N8,LC+N8,LC+N8,LC+N8,LC+N8,LC+N8
		.byte 	LC+N16,LC+N16
		.byte 	LC+N8,LC+N8,LC+N8,LC+N8,LC+N8,LC+N8,LC+N8
		.byte 	LC+N16,LC+N16

		.byte 	LC+N8,LC+N8,C+N8,LC+N8,C+N8,C+N8,LBb+N8,C+N8
		.byte 	LC+N8,LC+N8,C+N8,LC+N8,C+N8,C+N8,LBb+N8,C+N8
	
		.byte 	LF+N8,LF+N8,F+N8,LF+N8,F+N8,F+N8,LEb+N8,F+N8
		.byte 	LF+N8,LF+N8,F+N8,LF+N8,F+N8,F+N8,LEb+N8,F+N8

		.byte 	LEb+N8,LEb+N8,Eb+N8,LEb+N8,Eb+N8,Eb+N8,LDb+N8,Eb+N8
		.byte 	LEb+N8,LEb+N8,Eb+N8,LEb+N8,Eb+N8,Eb+N8,LDb+N8,Eb+N8

		.byte 	C+N8,C+N8,C+N8,C+N8,C+N8,C+N8,C+N8,C+N8
		.byte 	REPLAY

OPENMU2:
		.byte 	VOICE0,PIANO
		.byte 	G+N16,G+N16,G+N16,G+N16,G+N16,G+N16,G+N16,G+N16
		.byte 	G+N16,G+N16,G+N16,G+N16,G+N16,G+N16,F+N16,F+N16

		.byte 	G+N16,G+N16,G+N16,G+N16,G+N16,G+N16,G+N16,G+N16
		.byte 	G+N16,G+N16,G+N16,G+N16,G+N16,G+N16,F+N16,F+N16
			
		.byte 	Ab+N16,Ab+N16,Ab+N16,Ab+N16,Ab+N16,Ab+N16,Ab+N16
		.byte 	Ab+N16,Ab+N16,Ab+N16,Ab+N16,Ab+N16,Ab+N16,Ab+N16
		.byte 	Eb+16,Eb+N16		

		.byte 	Ab+N16,Ab+N16,Ab+N16,Ab+N16,Ab+N16,Ab+N16,Ab+N16
		.byte 	Ab+N16,Ab+N16,Ab+N16,Ab+N16,Ab+N16,Ab+N16,Ab+N16
		.byte 	Eb+16,Eb+N16   
		
		.byte 	G+N16,G+N16,G+N16,G+N16,G+N16,G+N16,G+N16,G+N16
		.byte 	G+N16,G+N16,G+N16,G+N16,G+N16,G+N16,F+N16,F+N16

		.byte 	G+N16,G+N16,G+N16,G+N16,G+N16,G+N16,G+N16,G+N16
		.byte 	G+N16,G+N16,G+N16,G+N16,G+N16,G+N16,F+N16,F+N16

		.byte 	C+N1,PAUSE+N8,C+N8,G+N8,HC+N8,Bb+N8,Ab+N8,G+N8,F+N8

		.byte 	D+N16,D+N16,D+N16,D+N16,D+N16,D+N16,D+N16,D+N16
		.byte 	D+N16,D+N16,D+N16,D+N16,D+N16,D+N16,D+N16,D+N16

		.byte 	C+N16,C+N16,C+N16,C+N16,C+N16,C+N16,C+N16,C+N16
		.byte 	C+N16,C+N16,C+N16,C+N16,C+N16,C+N16,C+N16,C+N16

		.byte 	G+N16,G+N16,G+N16,G+N16,G+N16,G+N16,G+N16,G+N16
		.byte 	G+N16,G+N16,G+N16,G+N16,G+N16,G+N16,G+N16,G+N16

		.byte 	Eb+N16,Eb+N16,Eb+N16,Eb+N16,Eb+N16,Eb+N16,Eb+N16,Eb+N16
		.byte 	Eb+N16,Eb+N16,Eb+N16,Eb+N16,Eb+N16,Eb+N16,Eb+N16,Eb+N16

		.byte 	G+N8,G+N8,G+N8,PAUSE+N4,G+N8,G+N8,G+N8		
		.byte 	G+N8,G+N8,G+N8,PAUSE+N4,G+N8,G+N8,G+N8		

		.byte 	Ab+N16,G+N16,F+N16,Ab+N16,G+N16,F+N16,Ab+N16,G+N16
		.byte 	Ab+N16,G+N16,F+N16,Ab+N16,G+N16,F+N16,Ab+N16,G+N16

		.byte 	D+N8,D+N8,D+N16,D+N16,D+N8,D+N8,PAUSE+N8,PAUSE+N4
		.byte 	G+N16,G+N16,G+N16,G+N16,G+N16,G+N16,G+N8,G+N8
		.byte 	PAUSE+N8,PAUSE+N4

		.byte 	D+N8,D+N8,D+N16,D+N16,D+N8,D+N8,PAUSE+N8,PAUSE+N4
		.byte 	G+N16,G+N16,G+N16,G+N16,G+N16,G+N16,G+N8,G+N8
		.byte 	PAUSE+N8,PAUSE+N4

		.byte 	REPLAY

;**************************************************************************		
;THIS TABLE SPECIFIES THE LOCATION IN ROM OF THE CONTROL TABLES TO USE FOR 
;EACH WORLD.  IF THE CONTROL TABLE IS STORED IN VIDEO ROM, BIT $8000 IS
;SET OFF.  SINCE ROM IS NORMALLY LOCATED AT AN ORG OF $8000, AN ADDRESS
;BELOW THIS IS OBVIOUSLY NOT IN PROGRAM ROM.  THE ADDRESS WILL BE USED
;TO FETCH FROM VIDEO ROM SPACE AFTER ADJUSTING FOR THE CORRECT PAGE.
;TABLES IN VIDEO ROM MUST NOT CROSS PAGE BOUNDRIES.  THE ENTIRE TABLE MUST
;BE PRESENT IN THE VIDEO BANK SPECIFIED.  VIDEO ADDRESS IS 32K SO THE
;RANGE OF 0 TO $7FFF IS ENOUGH TO SPECIFY ANY BANK AND OFFSET.

;DON'T PUT A LAUNCH ENEMY COMMAND INTO COLUMN 255 OF A TABLE.

USE_TABLE:			;THE TABLE TO USE FOR EACH WORLD NUMBER.
	.word 	PIER		;BOOT
	.word 	PIER	 	;PIER 
	.word 	SWAMP		;SWAMP
	.word 	TECH	 	;TECHNOPOLIS 
	.word 	SPACE		;SPACE
	.word 	WARE		;5 WAREHOUSE
	.word 	PITBULL		;6 PIT BULL
	.word 	TUNNELT		;7 TUNNEL
	.word 	PITS		;8 BAT PIT
	.word 	WARE		;9 WAREHOUSE WHEN LEAVING PITS
	.word 	PITS		;10 BUG PIT WITHIN LONG TUNNEL
	.word 	PITS		;11 TUNNELS PIT
	.word 	PITS		;12 TUNNELS PIT
	.word 	PITS		;13 PIT WITH BUG WITH KEY
	.word 	TUNL2T		;14 TUNNEL SECOND PART

;THIS IS THE TABLE FOR THE PIER SCENE.

PIER:

;COL 0
     	.byte 	$00,$00,$00,$00
     	.byte 	$26,$00,$FF,$FF	;NEED THIS FOR EXIT FROM JUMPSHACK
     	.byte 	$97,$11,20,$00	;FREE HERO IN CRACK ON BUILDING
     	.byte 	$16,$91,184,186	;ENTRANCE TO THE LITTLE PIER BUILDING
     	.byte 	$16,$91,184,186	;ENTRANCE TO THE LITTLE PIER BUILDING
     	.byte 	$20,$00,$35,$05	;EXPLOSION PROOF BOOTS
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$00,$02,14	;LAUNCH GUARD PUSHER            

;COL 8
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 16
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$00,$00,14	;LAUNCH THUG FROM SIDE OF SHACK
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$98,$0F,$01,$00	;HIDDEN LIFE FORCE

;COL 24
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$C0,$0A,13 	;PERMA LAUNCH BEES
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$00,$02,19	;LAUNCH PUSHER GUARD
     	.byte 	$00,$00,$00,$00
     	.byte 	$98,$0F,$01,$00	;HIDDEN LIFE FORCE

;COL 32
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00	
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE 
     	.byte 	$00,$00,$00,$00	
     	.byte 	$00,$00,$00,$00	
     	.byte 	$98,$0F,$01,$00	;HIDDEN LIFE FORCE

;COL 40
     	.byte 	$98,$0F,$02,$00	;HIDDEN LIFE FORCE
     	.byte 	$00,$00,$00,$00
     	.byte 	$20,$40,$04,17	;BLACKBIRD FROM BEHIND CRATE
 	.byte 	$20,$80,$00,16	;LAUNCH THUG  BY CRATE
     	.byte 	$00,$00,$00,$00
     	.byte 	$33,$00,195,$00	;ALLOW MORE PRIZES AND THUGS IN SHACK
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 48
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$80,$00,20	;LAUNCH THUG 
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$20,$80,$05,4	;BIRD DROPPING SHIT
     	.byte 	$04,$B2,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$00,$00,$00,$00

;COL 56
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$38,$C0,$0A,13	;PERMA LAUNCH BEE IF AT TOP
     	.byte 	$04,$B6,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$00,$00,$00,$00
     	.byte 	$38,$C0,$0A,13	;PERMA LAUNCH BEE IF AT TOP
     	.byte 	$04,$B3,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$20,$80,$05,1	;BIRD DROPPING SHIT
     	.byte 	$04,$B5,$00,$00	;EXPLOSIVE CHARGE

;COL 64
     	.byte 	$04,$B6,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$04,$B7,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$04,$B2,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$38,$C0,$0A,13	;PERMA LAUNCH BEE IF AT TOP
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$00,$00,$00,$00
     	.byte 	$04,$B6,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$04,$B7,$00,$00	;EXPLOSIVE CHARGE

;COL 72
     	.byte 	$04,$B2,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$04,$B3,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$27,$D1,$03,$04	;LEFT DOOR OF WHITE BUILDING
     	.byte 	$27,$51,$03,$04	;GIVES THE HERO A FLYING BOARD
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$80,$02,15	;LAUNCH GUARD PUSHER
     	.byte 	$00,$00,$00,$00
;COL 80
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$1D,$D1,-1,76		;RIGHT DOOR ON WHITE BUILDING
     	.byte 	$1D,$51,-1,76	
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$80,$02,19	;LAUNCH PUSHER GUARD

;COL 88
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$04,$B5,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$20,$00,$35,$04	;EXPLOSION PROOF BOOTS
 	.byte 	$20,$00,$00,20	;LAUNCH THUG 
 	.byte 	$20,$C0,$0A,12 	;PERMA LAUNCH BEE 
 	.byte 	$20,$80,$00,14	;LAUNCH THUG 
;COL 96
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$20,$80,$05,1	;BIRD DROPPING SHIT
     	.byte 	$00,$00,$00,$00

;COL 104
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$80,$02,13	;LAUNCH GUARDIAN THUG
     	.byte 	$20,$80,$05,3	;BIRD DROPPING SHIT
     	.byte 	$1D,$D1,-1,122	;LEFT DOOR ON BROWN BUILDING
     	.byte 	$1D,$51,-1,122	
     	.byte 	$2B,$00,$00,$11	;EXPLOSIVE CHARGE ROW

;COL 112
     	.byte 	$2B,$00,$00,$11	;EXPLOSIVE CHARGE ROW
     	.byte 	$2B,$00,$00,$11	;EXPLOSIVE CHARGE
     	.byte 	$2B,$00,$00,$11	;EXPLOSIVE CHARGE
     	.byte 	$2B,$00,$00,$11	;EXPLOSIVE CHARGE
     	.byte 	$2B,$00,$00,$11	;EXPLOSIVE CHARGE
     	.byte 	$2B,$00,$00,$11	;EXPLOSIVE CHARGE
     	.byte 	$2B,$00,$00,$11	;EXPLOSIVE CHARGE
     	.byte 	$2B,$00,$00,$11	;EXPLOSIVE CHARGE

;COL 120
     	.byte 	$2B,$00,$00,$11
     	.byte 	$1D,$D1,-1,110	;RIGHT DOOR ON BROWN BUILDING
     	.byte 	$1D,$51,-1,110	
 	.byte 	$20,$80,$02,18	;LAUNCH GUARDIAN PUSHER
     	.byte 	$00,$00,$00,$00
     	.byte 	$33,$00,208,$00	;ALLOW MORE PRIZES AND THUGS IN SHACK
     	.byte 	$04,$B2,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$04,$B3,$00,$00	;EXPLOSIVE CHARGE

;COL 128
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$04,$B5,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$20,$40,$04,16	;BLACKBIRD FROM BEHIND CRATE
     	.byte 	$98,$0F,$01,$00	;HIDDEN LIFE FORCE
     	.byte 	$98,$0F,$03,$00	;HIDDEN LIFE FORCE
     	.byte 	$04,$B3,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$04,$B5,$00,$00	;EXPLOSIVE CHARGE

;COL 136
     	.byte 	$04,$B6,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$04,$B7,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$04,$B2,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$04,$B3,$00,$00	;EXPLOSIVE CHARGE
 	.byte 	$20,$00,$3B,$07	;CIRCLE GUN
     	.byte 	$1D,$D1,220,250	;DOOR TO DEADLY SHACK.
     	.byte 	$1D,$51,220,250	;DOOR TO DEADLY SHACK.
     	.byte 	$38,$C0,$0A,11	;PERMA LAUNCH BEE IF AT TOP

;COL 144
     	.byte 	$38,$C0,$0A,12	;PERMA LAUNCH BEE IF AT TOP
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$80,$01,12	;LAUNCH PUSHER NEAR RIGHT OF SHACK
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 152
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$80,$00,$14	;LAUNCH THUG 
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 160
     	.byte 	$00,$00,$00,$00
     	.byte 	$20,$00,$05,4	;BIRD DROPPING SHIT
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 168
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$20,$80,$00,14	;LAUNCH THUG
     	.byte 	$20,$80,$05,1	;BIRD DROPPING SHIT
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$38,$C0,$0A,15	;PERMA LAUNCH BEE IF AT TOP

;COL 176
 	.byte 	$20,$00,$03,14	;LAUNCH GUARD SPACEMAN          
 	.byte 	$20,$00,$03,17	;LAUNCH GUARD SPACEMAN          
     	.byte 	$04,$B2,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$0F,$D1,$82,$89	;DOOR TO SWAMP (BOAT HOUSE).
     	.byte 	$0F,$51,$82,$89
 	.byte 	$20,$00,$03,20	;LAUNCH GUARD SPACEMAN          
     	.byte 	$04,$B2,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$24,$00,$00,$00	;RIGHT WORLD LIMIT

;THE NEXT 32 ARE ACTUALLY WITHIN THE SHACK THAT IS INSIDE THE BAIT SHOP.

;COL 184
     	.byte 	$23,$00,$00,$00	;LEFT WORLD LIMIT
     	.byte 	$16,$91,0,4		;EXIT FROM THE ROOM
     	.byte 	$16,$91,0,4		;EXIT FROM THE ROOM
     	.byte 	$16,$91,0,4		;EXIT FROM THE ROOM
 	.byte 	$20,$00,$00,$14	;LAUNCH THUG
     	.byte 	$20,$80,$0A,10	;LAUNCH BEE 
     	.byte 	$00,$00,$00,$00
     	.byte 	$20,$00,$22,$0D	;COKE
	
;COL 192
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$00,$37,$05	;FREEZE GUN
     	.byte 	$20,$80,$0A,0	;LAUNCH BEE
     	.byte 	$32,$00,$00,$00	;STOP SCANNING COLUMN (195)
 	.byte 	$20,$C0,$1A,0 	;PERMA LAUNCH BAT
     	.byte 	$00,$00,$00,$00
     	.byte 	$20,$80,$0A,2	;LAUNCH BEE 
 	.byte 	$20,$00,$01,$13	;LAUNCH PUSHER

;COL 200
     	.byte 	$00,$00,$00,$00
     	.byte 	$20,$00,$23,$0E	;CASH
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$20,$00,$23,$0E	;CASH
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 208
     	.byte 	$32,$00,$00,$00	;STOP SCANNING COLUMN (208)
     	.byte 	$20,$00,$24,$11	;SUITCASE
 	.byte 	$20,$00,$03,$13	;LAUNCH GUARD SPACEMAN          
     	.byte 	$20,$00,$24,$0E	;SUITCASE
 	.byte 	$20,$C0,$0A,4 	;PERMA LAUNCH BEE 
     	.byte 	$20,$00,$24,$11	;SUITCASE
 	.byte 	$20,$C0,$0A,0 	;PERMA LAUNCH BEE 
     	.byte 	$24,$00,$00,$00	;RIGHT WORLD LIMIT

;THE NEXT 36 ARE ACTUALLY INSIDE THE JUMP SHACK (THE LITTLE WHITE SHACK WHERE
;YOU HAVE TO JUMP ACROSS THE WATER ON TOP OF THE LOGS).

;COL 216
     	.byte 	$23,$00,$00,$00	;LEFT WORLD LIMIT
     	.byte 	$0C,$80,$00,$01	;MOVE HERO TO START OF PIER
     	.byte 	$2D,$00,-1,$00	;RESET CLIFF LEVEL
     	.byte 	$03,$20,$0E,$FF	;PAUSE SO THEY SEE THE FREE HERO
     	.byte 	$35,$00,$00,$05	;FREE HERO IF HE GETS TO END.
     	.byte 	$2D,$00,140,$00	;SET CLIFF LEVEL TO JUST ABOVE WATER.
     	.byte 	$20,$C0,$05,0	;BIRD DROPPING SHIT
	.byte 	0,0,0,0
;COL 224
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 232
     	.byte 	$20,$00,$25,$09	;HEALTH
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$20,$40,$05,0	;BIRD DROPPING SHIT
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 240
     	.byte 	$20,$00,$25,$0B	;HEALTH
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$20,$40,$05,0	;BIRD DROPPING SHIT
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00	

;COL 248
     	.byte 	$26,$00,172,180	;SET SINKING AND DEATH LEVELS
     	.byte 	$2D,$00,140,$00	;SET CLIFF LEVEL TO JUST ABOVE WATER.
     	.byte 	$1E,$00,$04,$00	;ENTRANCE FROM THE OTHER WORLD 
     	.byte 	$24,$00,$00,$00	;RIGHT WORLD LIMIT.  WE ENTER HERE.

SWAMP:

;COL 0
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$20,$00,$07,$03	;GATOR
     	.byte 	$20,$80,$1E,$0C	;CHOPPER

;COL 8
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$20,$00,$09,$16	;SHARK
     	.byte 	$20,$00,$22,$16	;COKE
     	.byte 	$05,$11,$E0,$20	;PROPEL HERO IF IN CURRENTS
     	.byte 	$00,$00,$00,$00
     	.byte 	$05,$0B,$E0,$20	;PROPEL HERO IF IN CURRENTS
     	.byte 	$04,$29,$00,$00	;ROCK

;COL 16
     	.byte 	$04,$28,$00,$00	;ROCK
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$20,$00,$2C,$00	;GUN TURRET
     	.byte 	$04,$34,$00,$00
     	.byte 	$04,$33,$00,$00	;ROCK
     	.byte 	$20,$80,$1E,$10	;CHOPPER
     	.byte 	$05,$0F,$E0,$20	;PROPEL HERO IF IN CURRENTS

;COL 24
     	.byte 	$05,$07,$E0,$00	;PROPEL HERO IF IN CURRENTS
     	.byte 	$05,$04,$E0,$20	;PROPEL HERO IF IN CURRENTS
     	.byte 	$05,$01,$E0,$20	;PROPEL HERO IF IN CURRENTS
     	.byte 	$04,$2D,$00,$00	;ROCK
     	.byte 	$04,$2D,$00,$00
     	.byte 	$20,$80,$1E,$10	;CHOPPER
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 32
     	.byte 	$20,$00,$33,$00	;VERTICAL LOG
     	.byte 	$20,$80,$1E,$0A	;CHOPPER
     	.byte 	$20,$80,$09,$11	;SHARK
     	.byte 	$05,$08,$E0,$20	;PROPEL HERO IF IN CURRENTS
     	.byte 	$05,$08,$E0,$20	;PROPEL HERO IF IN CURRENTS
     	.byte 	$20,$00,$22,$13	;COKE
     	.byte 	$04,$26,$00,$00	;ROCK
     	.byte 	$00,$00,$00,$00

;COL 40
     	.byte 	$05,$0B,$E0,$00	;PROPEL HERO IF IN CURRENTS
     	.byte 	$20,$80,$1E,$06	;CHOPPER
     	.byte 	$05,$0C,$E0,$00	;PROPEL HERO IF IN CURRENTS
     	.byte 	$20,$00,$2C,$16	;GUN TURRET
     	.byte 	$04,$32,$00,$00	;ROCK
     	.byte 	$20,$00,$33,$00	;VERTICAL LOG
     	.byte 	$2B,$00,$06,$1A	;HERO WILL HIT DOCK IF NOT BELOW IT
     	.byte 	$27,$A6,$06,$0A	;ENTRANCE TO BOAT CHANGE DOC

;COL 48
     	.byte 	$27,$A6,$06,$0A	;ENTRANCE TO BOAT CHANGE DOC
     	.byte 	$27,$26,$06,$0A	;USED AS DRESSING ROOM FOR JETSKI
     	.byte 	$27,$26,$06,$0A	;USED AS DRESSING ROOM FOR JETSKI
     	.byte 	$2B,$00,$06,$1A	;HERO WILL HIT DOCK IF NOT BELOW IT
     	.byte 	$05,$12,$E0,$E0	;PROPEL HERO IF IN CURRENTS
     	.byte 	$20,$80,$09,$14	;SHARK
     	.byte 	$20,$80,$1E,$04	;CHOPPER
     	.byte 	$04,$27,$00,$00

;COL 56
     	.byte 	$04,$26,$00,$00	;ROCK
     	.byte 	$20,$00,$07,$02	;GATOR
     	.byte 	$20,$00,$22,$01	;COKE
     	.byte 	$05,$15,$E0,$20	;PROPEL HERO IF IN CURRENTS
     	.byte 	$00,$00,$00,$00	;ROCK
     	.byte 	$05,$13,$E0,$20	;PROPEL HERO IF IN CURRENTS
     	.byte 	$05,$12,$E0,$20	;PROPEL HERO IF IN CURRENTS
     	.byte 	$05,$11,$E0,$20	;PROPEL HERO IF IN CURRENTS

;COL 64
     	.byte 	$20,$00,$33,$00	;VERTICAL LOG
     	.byte 	$05,$0F,$E0,$20	;PROPEL HERO IF IN CURRENTS
     	.byte 	$05,$0E,$E0,$20	;PROPEL HERO IF IN CURRENTS
     	.byte 	$05,$0D,$E0,$20	;PROPEL HERO IF IN CURRENTS
     	.byte 	$04,$34,$00,$00	;ROCK
     	.byte 	$04,$33,$00,$00	
     	.byte 	$05,$0D,$E0,$20	;PROPEL HERO IF IN CURRENTS
     	.byte 	$20,$80,$1E,$08	;CHOPPER

;COL 72
     	.byte 	$20,$00,$2C,$16	;GUN TURRET
     	.byte 	$05,$0A,$E0,$20	;PROPEL HERO IF IN CURRENTS
     	.byte 	$20,$80,$1E,$0C	;CHOPPER
     	.byte 	$20,$80,$2A,$10	;SHARK THAT FOLLOWS HERO
     	.byte 	$04,$28,$00,$00
     	.byte 	$04,$27,$00,$00	;ROCK
     	.byte 	$05,$16,$E0,$E0	;PROPEL HERO IF IN PLANTS
     	.byte 	$05,$15,$E0,$E0	;PROPEL HERO IF IN PLANTS

;COL 80
     	.byte 	$05,$16,$E0,$E0	;PROPEL HERO IF IN PLANTS
     	.byte 	$05,$15,$E0,$E0	;PROPEL HERO IF IN PLANTS
     	.byte 	$04,$23,$00,$00
     	.byte 	$04,$22,$00,$00	;ROCK
     	.byte 	$05,$16,$E0,$E0	;PROPEL HERO IF IN BUSHES
     	.byte 	$20,$00,$33,$00	;VERTICAL LOG
     	.byte 	$20,$00,$22,$01	;COKE
     	.byte 	$04,$2F,$00,$00

;COL 88
     	.byte 	$04,$2E,$00,$00	;ROCK
     	.byte 	$20,$80,$1E,$10	;CHOPPER
     	.byte 	$05,$13,$E0,$20	;PROPEL HERO IF IN CURRENTS
     	.byte 	$2B,$00,$08,$1A	;HERO WILL HIT DOCK IF NOT BELOW IT
     	.byte 	$2B,$00,$08,$1A	;HERO WILL HIT DOCK IF NOT BELOW IT
     	.byte 	$2B,$00,$08,$1A	;HERO WILL HIT DOCK IF NOT BELOW IT
     	.byte 	$2B,$00,$08,$1A	;HERO WILL HIT DOCK IF NOT BELOW IT
     	.byte 	$2B,$00,$08,$1A	;HERO WILL HIT DOCK IF NOT BELOW IT

;COL 96
     	.byte 	$04,$23,$00,$00	;DOCK
     	.byte 	$04,$23,$00,$00	;DOCK
     	.byte 	$04,$23,$00,$00	;DOCK
     	.byte 	$04,$33,$00,$00	;ROCK
     	.byte 	$04,$23,$00,$00	;DOCK
     	.byte 	$04,$23,$00,$00	;DOCK
     	.byte 	$04,$23,$00,$00	;DOCK
     	.byte 	$04,$23,$00,$00	;DOCK

;COL 104
     	.byte 	$04,$23,$00,$00	;DOCK
     	.byte 	$04,$23,$00,$00	
     	.byte 	$20,$80,$09,$12	;SHARK
     	.byte 	$20,$80,$3A,$0C	;MEAN CHOPPER
     	.byte 	$37,$41,$83,$8B	;DOCK WHERE HERO GOES WHEN DONE
     	.byte 	$20,$80,$3A,$04	;MEAN CHOPPER
     	.byte 	$20,$00,$22,$15	;COKE
     	.byte 	$04,$23,$00,$00	;DOCK

;COL 112
     	.byte 	$04,$23,$00,$00	;DOCK
     	.byte 	$04,$32,$00,$00
     	.byte 	$04,$23,$00,$00	;DOCK
     	.byte 	$04,$23,$00,$00	;DOCK
     	.byte 	$04,$23,$00,$00	;DOCK
     	.byte 	$04,$23,$00,$00	;DOCK
     	.byte 	$04,$23,$00,$00	;DOCK
     	.byte 	$04,$23,$00,$00	;DOCK

;COL 120
     	.byte 	$2B,$00,$08,$18	;HERO HITS DOCK HERE
     	.byte 	$20,$80,$3A,$0C	;MEAN CHOPPER
     	.byte 	$20,$00,$22,$16	;COKE
     	.byte 	$2B,$00,$18,$18	;HERO HITS ROCKS HERE
     	.byte 	$20,$00,$34,$15	;HORIZONTAL LOG
     	.byte 	$20,$00,$34,$12	;HORIZONTAL LOG
     	.byte 	$20,$00,$34,$0F	;HORIZONTAL LOG
     	.byte 	$00,$00,$00,$00

TECH:	

;COL 0
     	.byte 	$00,$00,$00,$00
     	.byte 	$98,$11,$02,$00	;HIDDEN LIFE FORCE
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$26,$00,$C0,$C1	;SET DEATH LEVEL FOR THE CLIFFS
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 8
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$98,$11,$04,$00	;HIDDEN LIFE FORCE
     	.byte 	$00,$00,$00,$00
     	.byte 	$98,$11,$04,$00	;HIDDEN LIFE FORCE
     	.byte 	$98,$11,$06,$00	;HIDDEN LIFE FORCE
 	.byte 	$20,$00,$27,$01	;LAUNCH FLYING PLATFORM
     	.byte 	$00,$00,$00,$00

;COL 16
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$00,$28,$0C	;LAUNCH HALF A ROBOCOP ON BUILDING
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 24
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$80,$12,$10	;LAUNCH ROBOCOP
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$80,$1F,$16	;LAUNCH ROLLING BOMBER

;COL 32
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$80,$12,$12	;LAUNCH ROBOCOP
 	.byte 	$20,$80,$1F,$14	;LAUNCH ROLLING BOMBER
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 40
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$00,$10,$12	;LAUNCH BAZOOKA TRACKER ON Y
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 48
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$00,$28,$02	;LAUNCH HALF A ROBOCOP ON BUILDING
 	.byte 	$20,$80,$26,$12	;LAUNCH WORM
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$00,$11,$12	;LAUNCH BAZOOKA GUARD
 	.byte 	$20,$80,$11,$14	;LAUNCH BAZOOKA GUARD
;COL 56
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$40,$20,$03	;FLOATING BOMB BALLS
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$97,$11,$0A,$01	;FREE HERO NEXT TO WALL COMPUTER
     	.byte 	$00,$00,$00,$00

;COL 64
     	.byte 	$1E,$00,32,$00	;HERO DROPS DOWN HERE FROM GUN SHOP
     	.byte 	$1D,$93,-1,64		;GUN SHOP ENTRANCE. IT GOES UP.
     	.byte 	$1D,$13,-1,64
      	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$80,$1F,$14	;LAUNCH ROLLING BOMBER
     	.byte 	$00,$00,$00,$00

;COL 72
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$40,$20,$03	;FLOATING BOMB BALLS
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$20,$80,$1B,$04	;BOMB DROPPER

;COL 80
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$98,$13,$01,$00	;HIDDEN LIFE FORCE
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 88
     	.byte 	$00,$00,$00,$00
     	.byte 	$1F,$C0,$0C,$A4
     	.byte 	$1F,$C0,$0C,$AC
     	.byte 	$1F,$C0,$0C,$B4	;THESE FORM THE FIRST HOLE IN THE RAMP
     	.byte 	$1F,$C0,$0C,$BC
     	.byte 	$1F,$C0,$20,$C0
     	.byte 	$1F,$C0,$28,$C0
     	.byte 	$1F,$00,$20,$9F

;COL 96
     	.byte 	$1F,$00,$20,$9F
     	.byte 	$1F,$00,$20,$9F
     	.byte 	$1F,$00,$20,$9F
     	.byte 	$1F,$00,$0C,$9F
     	.byte 	$1F,$00,$0C,$A7
     	.byte 	$1F,$00,$0C,$AF
     	.byte 	$1F,$00,$0C,$B7
     	.byte 	$00,$00,$00,$00

;COL 104
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 112
     	.byte 	$20,$80,$1B,$02	;BOMB DROPPER
 	.byte 	$20,$00,$28,$02	;LAUNCH HALF A ROBOCOP INSIDE DOME
     	.byte 	$97,$11,$02,$02	;FREE HERO NEAR INFO TECH
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 120
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$00,$1F,$14	;LAUNCH ROLLING BOMBER
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$40,$20,$01	;FLOATING BOMB BALLS
 	.byte 	$20,$00,$28,$06	;LAUNCH HALF A ROBOCOP INSIDE DOME
 	.byte 	$20,$80,$11,$12	;LAUNCH BAZOOKA GUARD
     	.byte 	$00,$00,$00,$00

;COL 128
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
   	.byte 	$20,$00,$28,$02	;LAUNCH HALF A ROBOCOP INSIDE DOME
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$80,$11,$10	;LAUNCH BAZOOKA GUARD

;COL 136
 	.byte 	$20,$00,$10,$12	;LAUNCH BAZOOKA TRACKER ON Y
     	.byte 	$27,$93,$01,$02	;ENTRANCE TO INFO TECH
     	.byte 	$27,$13,$01,$02	;USED AS DRESSING ROOM FOR HOVER CRAFT
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$00,$1F,$14	;LAUNCH ROLLING BOMBER
     	.byte 	$00,$00,$00,$00

;COL 144
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 152
     	.byte 	$00,$00,$00,$00
      	.byte 	$1F,$C0,$0C,$A4
     	.byte 	$1F,$C0,$0C,$AC
     	.byte 	$1F,$C0,$0C,$B4
     	.byte 	$1F,$C0,$0C,$BC
     	.byte 	$1F,$C0,$20,$C0
     	.byte 	$1F,$C0,$28,$C0
     	.byte 	$1F,$C0,$30,$C0

;COL 160
     	.byte 	$1F,$40,$48,$C0
     	.byte 	$1F,$40,$40,$C0
     	.byte 	$1F,$00,$38,$9F
     	.byte 	$1F,$00,$30,$9F
     	.byte 	$1F,$00,$28,$9F
     	.byte 	$1F,$00,$20,$9F
     	.byte 	$1F,$00,$0C,$9F
     	.byte 	$1F,$00,$0C,$A7

;COL 168
     	.byte 	$1F,$00,$0C,$AF
     	.byte 	$1F,$00,$0C,$B7
 	.byte 	$20,$00,$27,$01	;LAUNCH FLYING PLATFORM
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$00,$1F,$14	;LAUNCH ROLLING BOMBER
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 176
     	.byte 	$00,$00,$00,$00
	.byte 	$00,$00,$00,$00
 	.byte 	$20,$40,$20,$02	;FLOATING BOMB BALLS
 	.byte 	$20,$00,$10,$10	;LAUNCH BAZOOKA TRACKER ON Y
     	.byte 	$00,$00,$00,$00
     	.byte 	$27,$93,$00,$02	;ENTRANCE TO MOTORCYCLE SHOP
     	.byte 	$27,$13,$00,$02	;DRESSING ROOM FOR CYCLE
     	.byte 	$00,$00,$00,$00

;COL 184
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$40,$20,$02	;FLOATING BOMB BALLS
     	.byte 	$20,$80,$1B,$06	;BOMB DROPPER
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 192
 	.byte 	$20,$80,$26,$12	;LAUNCH WORM
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$98,$11,$04,$00	;HIDDEN LIFE FORCE

;COL 200
 	.byte 	$20,$C0,$20,$04	;FLOATING BOMB BALLS
     	.byte 	$1D,$93,-1,203	;DOOR WITH XX. IT GOES UP.
     	.byte 	$1D,$13,-1,203
     	.byte 	$1E,$00,60,$00	;PLACE HERO EMERGES FROM XX DOOR.
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$C0,$20,$04	;FLOATING BOMB BALLS
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 208
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$20,$80,$1B,$06	;BOMB DROPPER
 	.byte 	$20,$80,$26,$12	;LAUNCH WORM
     	.byte 	$34,$00,$04,$90	;FIRE WALL GUN
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 216
     	.byte 	$00,$00,$00,$00
 	.byte 	$21,$80,$13,$12	;LAUNCH CRAZY HOVERCRAFT 
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$00,$1F,$16	;LAUNCH ROLLING BOMBER
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 224
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$40,$20,$02	;FLOATING BOMB BALLS
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$20,$00,$1B,$02	;BOMB DROPPER
     	.byte 	$0F,$93,$84,$8A	;ENTRANCE TO FBI OFFICE
     	.byte 	$0F,$13,$84,$8A
     	.byte 	$00,$00,$00,$00

;COL 232
 	.byte 	$20,$40,$20,$02	;FLOATING BOMB BALLS
 	.byte 	$20,$00,$28,$03	;LAUNCH HALF A ROBOCOP ON BUILDING
     	.byte 	$98,$12,$01,$00	;HIDDEN LIFE FORCE
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$00,$1F,$14	;LAUNCH ROLLING BOMBER
     	.byte 	$00,$00,$00,$00

WARE:

;COL 0
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$04,$B5,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$04,$B6,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$1D,$93,-1,147	;CONNECTING DOOR TO RIGHT HALF
     	.byte 	$1D,$13,-1,147	
     	.byte 	$21,$00,$21,$07	;TNT CARD KEY AT TOP OF WAREHOUSE
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 8
     	.byte 	$38,$80,$1D,$05	;LAUNCH RAT IF AT TOP
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$98,$13,$01,$00	;HIDDEN LIFE FORCE
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$00,$3C,$09	;CIRCLE GUN
     	.byte 	$00,$00,$00,$00

;COL 16
     	.byte 	$39,$80,$15,$10	;LAUNCH BLACK ENEMY IN LOWER HALF
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$39,$00,$2E,$17	;LAUNCH BLOB
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 24
     	.byte 	$04,$B7,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$00,$00,$00,$00
     	.byte 	$39,$80,$30,$0B	;LAUNCH ENERGY CLOUD IF AT BOTTOM
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$39,$80,$39,$12	;LAUNCH RED ENEMY
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE

;COL 32
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$98,$13,$02,$00	;HIDDEN LIFE FORCE
     	.byte 	$00,$00,$00,$00
     	.byte 	$34,$40,$04,$90	;FIRE WALL GUN
     	.byte 	$34,$00,$04,$90	;FIRE WALL GUN
     	.byte 	$34,$80,$04,$90	;FIRE WALL GUN
     	.byte 	$38,$80,$31,$00	;LAUNCH ENERGY CLOUD IF AT TOP
     	.byte 	$00,$00,$00,$00

;COL 40
     	.byte 	$38,$80,$1D,$05	;LAUNCH RAT
     	.byte 	$00,$00,$00,$00
     	.byte 	$39,$00,$2E,$17	;LAUNCH BLOB
     	.byte 	$0F,$93,$07,$00	;LEFT DOOR TO TUNNEL 
     	.byte 	$0F,$13,$07,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$20,$00,$36,$09	;EXPLOSION PROOF BOOTS

;COL 48
     	.byte 	$34,$00,$04,$90	;FIRE WALL GUN
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
    	.byte 	$1D,$93,-1,222	;EXIT FROM THE TUNNEL AND PITS.
    	.byte 	$1D,$13,-1,222	
     	.byte 	$39,$80,$30,$09	;LAUNCH ENERGY CLOUD IF AT BOTTOM
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 56
     	.byte 	$38,$80,$1D,$05	;LAUNCH RAT
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$34,$40,$04,$90	;FIRE WALL GUN
     	.byte 	$34,$00,$04,$90	;FIRE WALL GUN
     	.byte 	$34,$80,$04,$90	;FIRE WALL GUN
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE

;COL 64
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE

;COL 72
     	.byte 	$04,$B5,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$00,$00,$00,$00
     	.byte 	$38,$80,$1D,$05	;LAUNCH RAT
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$39,$00,$2E,$17	;LAUNCH BLOB
     	.byte 	$00,$00,$00,$00

;COL 80
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$00,$00,$00,$00
     	.byte 	$04,$B6,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$21,$00,$1C,$12	;START WALL GUN
     	.byte 	$38,$80,$1D,$05	;LAUNCH RAT
     	.byte 	$0F,$93,$86,$24	;LOCKED DOOR TO PITBULL.
					;REQUIRES 2 KEYS.

;COL 88
     	.byte 	$0F,$13,$86,$24	;LOCKED DOOR TO PITBULL
     	.byte 	$39,$80,$30,$0A	;LAUNCH ENERGY CLOUD IF AT BOTTOM
     	.byte 	$21,$00,$1C,$12	;START WALL GUN
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$38,$80,$1D,$05	;LAUNCH RAT

;COL 96
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$34,$00,$04,$90	;FIRE WALL GUN
     	.byte 	$34,$80,$04,$90	;FIRE WALL GUN
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$00,$00,$00,$00

;COL 104
     	.byte 	$39,$80,$39,$12	;LAUNCH RED ENEMY
     	.byte 	$38,$80,$1D,$05	;LAUNCH RAT IF AT TOP
     	.byte 	$00,$00,$00,$00
     	.byte 	$04,$B6,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$2B,$00,$00,$13	;EXPLOSIVE CHARGE
     	.byte 	$2B,$00,$00,$13	;EXPLOSIVE CHARGE
     	.byte 	$2B,$00,$00,$13	;EXPLOSIVE CHARGE ROW
     	.byte 	$2B,$00,$00,$13	;EXPLOSIVE CHARGE

;COL 112
     	.byte 	$2B,$00,$00,$13	;EXPLOSIVE CHARGE
     	.byte 	$2B,$00,$00,$13	;EXPLOSIVE CHARGE
     	.byte 	$2B,$00,$00,$13	;EXPLOSIVE CHARGE
     	.byte 	$2B,$00,$00,$13	;EXPLOSIVE CHARGE
     	.byte 	$2B,$00,$00,$13	;EXPLOSIVE CHARGE
     	.byte 	$2B,$00,$00,$13	;EXPLOSIVE CHARGE
     	.byte 	$2B,$00,$00,$13	;EXPLOSIVE CHARGE
     	.byte 	$2B,$00,$00,$13	;EXPLOSIVE CHARGE

;COL 120
     	.byte 	$38,$80,$1D,$05	;LAUNCH RAT
     	.byte 	$04,$B5,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$38,$80,$31,$00	;LAUNCH ENERGY CLOUD AT TOP
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE

;COL 128
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$00,$00,$00,$00	;START OF NEW BEAM
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$20,$00,$38,$06	;FREEZE GUN
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE

;COL 136
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00   	;BEAM AT TOP ENDS HERE
     	.byte 	$00,$00,$00,$00		
     	.byte 	$39,$80,$15,$10	;LAUNCH BLACK ENEMY
     	.byte 	$1E,$00,32,$00	;PLACE WHERE HERO EMERGES AT TOP
     	.byte 	$16,$93,-1,141	;PASSAGE TO TOP OF WAREHOUSE
     	.byte 	$16,$93,-1,141	;PASSAGE TO TOP OF WAREHOUSE

;COL 144
     	.byte 	$34,$00,$04,$90	;FIRE WALL GUN
     	.byte 	$34,$80,$04,$90	;FIRE WALL GUN
     	.byte 	$1D,$93,$00,$04	;CONNECTING DOOR TO LEFT HALF
     	.byte 	$1D,$13,$00,$04	
     	.byte 	$00,$00,$00,$00
     	.byte 	$39,$00,$1C,$12	;START WALL GUN
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 152
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$34,$40,$04,$90	;FIRE WALL GUN
     	.byte 	$34,$00,$04,$90	;FIRE WALL GUN
     	.byte 	$34,$80,$04,$90	;FIRE WALL GUN
     	.byte 	$38,$80,$1D,$05	;LAUNCH RAT
     	.byte 	$00,$00,$00,$00

;COL 160
     	.byte 	$04,$B5,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$04,$B6,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$04,$B7,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$00,$00,$00,$00
     	.byte 	$39,$00,$2F,$09	;LAUNCH GUN MACHINE UNDER BEAM
     	.byte 	$00,$00,$00,$00
     	.byte 	$34,$40,$04,$90	;FIRE WALL GUN
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE

;COL 168
     	.byte 	$04,$B5,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 176
     	.byte 	$38,$80,$1D,$05	;LAUNCH RAT
     	.byte 	$00,$00,$00,$00
     	.byte 	$04,$B7,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 184
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$04,$B5,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$98,$11,$02,$00	;HIDDEN LIFE FORCE
     	.byte 	$98,$11,$02,$00	;HIDDEN LIFE FORCE
     	.byte 	$39,$00,$39,$12	;LAUNCH RED ENEMY
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$98,$12,$04,$00	;HIDDEN LIFE FORCE

;COL 192
     	.byte 	$04,$B7,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$39,$C0,$30,$08	;LAUNCH ENERGY CLOUD IF AT BOTTOM
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$04,$B5,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$00,$00,$00,$00
     	.byte 	$39,$80,$15,$10	;LAUNCH BLACK ENEMY
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 200
     	.byte 	$00,$00,$00,$00
     	.byte 	$38,$80,$1D,$05	;LAUNCH RAT AT TOP
     	.byte 	$04,$B6,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$04,$B6,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$04,$B7,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$04,$B6,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$00,$00,$00,$00
     	.byte 	$39,$00,$39,$13	;LAUNCH RED ENEMY

;COL 208
     	.byte 	$39,$00,$2F,$09	;LAUNCH GUN MACHINE UNDER BEAM
     	.byte 	$00,$00,$00,$00
     	.byte 	$04,$B6,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$38,$80,$1D,$05	;LAUNCH RAT
     	.byte 	$04,$B7,$00,$00	;EXPLOSIVE CHARGE
     	.byte 	$98,$12,$02,$00	;HIDDEN LIFE FORCE
     	.byte 	$00,$00,$00,$00
     	.byte 	$04,$B4,$00,$00	;EXPLOSIVE CHARGE

;COL 216
     	.byte 	$04,$B5,$00,$00	;EXPLOSIVE CHARGE	
     	.byte 	$98,$13,$01,$00	;HIDDEN LIFE FORCE
     	.byte 	$38,$80,$1D,$05	;LAUNCH RAT
     	.byte 	$00,$00,$00,$00
     	.byte 	$20,$00,$36,$06	;EXPLOSION PROOF BOOTS
    	.byte 	$1D,$93,-1,222	;DOOR EXIT (ENTRANCE TO THIS WORLD)
    	.byte 	$1D,$13,-1,222	;DOOR EXIT (ENTRANCE TO THIS WORLD)
     	.byte 	$00,$00,$00,$00

;COL 224
     	.byte 	$00,$00,$00,$00

SPACE:

;COL 0
     	.byte 	$20,$C0,$19,$00	;PERMA LAUNCH MOVING MINE
     	.byte 	$00,$00,$00,$00
     	.byte 	$30,$00,$0B,$08	;POSITION AN EXPLODING METEOR
     	.byte 	$00,$00,$00,$00
    	.byte 	$00,$00,$00,$00
    	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 8
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$30,$00,$0B,$0C	;POSITION AN EXPLODING METEOR
     	.byte 	$22,$00,$85,25	;GO TO WAREHOUSE BRIEFING WHEN KILLED

;COL 16
     	.byte 	$22,$00,$85,25	;GO TO WAREHOUSE BRIEFING WHEN KILLED
     	.byte 	$22,$00,$85,25	;GO TO WAREHOUSE BRIEFING WHEN KILLED
     	.byte 	$22,$00,$85,25	;GO TO WAREHOUSE BRIEFING WHEN KILLED
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 24
     	.byte 	$30,$00,$0B,$06	;POSITION AN EXPLODING METEOR
     	.byte 	$21,$80,$0D,$0C	;LAUNCH SATELITE.  DON'T CHANGE COL!
     	.byte 	$00,$00,$00,$00
     	.byte 	$04,$35,$00,$00	;MINE
     	.byte 	$04,$36,$00,$00	;MINE
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 32
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$04,$23,$00,$00	;MINE
     	.byte 	$04,$24,$00,$00	;MINE
 	.byte 	$20,$00,$3D,$10	;SPACE GUN

;COL 40
     	.byte 	$00,$00,$00,$00
     	.byte 	$04,$34,$00,$00	;MINE
     	.byte 	$04,$35,$00,$00	;MINE
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$00,$3D,$10	;SPACE GUN
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$20,$C0,$19,$16	;PERMA LAUNCH MOVING MINE

;COL 48
     	.byte 	$00,$00,$00,$00
     	.byte 	$30,$00,$0B,$10	;POSITION AN EXPLODING METEOR
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 56
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$00,$3D,$08	;SPACE GUN
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

PITBULL:		;PITBULL SHARES WITH FIRST PART OF TUNNEL
TUNNELT:

;COL 0
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$3A,$00,8,$06	;ERASE ENDSCENE IF NOT PITBULL
     	.byte 	$3A,$00,4,$06	;ERASE PITBULL

     	.byte 	$00,$00,$00,$00
;     	.byte 	$20,$40,$32,$14	;LAUNCH PITBULL'S GUNS

     	.byte 	$3A,$00,6,$07	;ERASE SUITCASE
     	.byte 	$20,$00,$24,$05	;SUITCASE
     	.byte 	$3A,$00,9,$07	;ERASE HEALTH

;COL 8
     	.byte 	$2F,$0C,$05,$00	;DO END OF GAME SCENE IF HAVE TNT CARD
     	.byte 	$20,$00,$25,$05	;HEALTH
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$3A,$00,28,$06	;ERASE PITBULL

;COL 16
     	.byte 	$3A,$00,17,$07	;ERASE HOLE
     	.byte 	$25,$05,$0A,$20	;HOLE IN GROUND TO BUG PIT
     	.byte 	$00,$00,$00,$00	
     	.byte 	$3A,$00,20,$07	;ERASE HEALTH
     	.byte 	$20,$00,$25,$05	;HEALTH
     	.byte 	$00,$00,$00,$00	
     	.byte 	$3A,$00,23,$07	;ERASE THUG
 	.byte 	$20,$00,$00,$02	;PUT THUG IN TUNNEL

;COL 24
     	.byte 	$3A,$00,25,$06	;ERASE HERO
     	.byte 	$97,$0E,$10,$03	;FREE HERO BELOW SECOND WALL COMPUTER
     	.byte 	$3A,$00,27,$06	;ERASE PIT GUN

     	.byte 	$00,$00,$00,$00
;     	.byte 	$20,$40,$32,$14	;LAUNCH PITBULL'S GUNS

     	.byte 	$21,$80,$16,$0F	;LAUNCH PITBULL
     	.byte 	$00,$00,$00,$00	
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 32
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$80,$01,$02	;PUT PUSHER IN TUNNEL
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$20,$00,$05,$00	;BIRD
     	.byte 	$20,$00,$23,$07	;CASH
     	.byte 	$00,$00,$00,$00

;COL 40
     	.byte 	$20,$00,$23,$07	;CASH
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$20,$80,$05,$00	;BIRD
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

;COL 48
     	.byte 	$20,$00,$22,$07	;COKE
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$25,$07,$08,$20	;HOLE IN GROUND TO BAT PIT
     	.byte 	$00,$00,$00,$00

;COL 56
     	.byte 	$20,$00,$24,$07	;SUITCASE
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00
 	.byte 	$20,$80,$03,$03	;PUT SPACEMAN IN TUNNEL

TUNL2T:			;THIS TUNNEL SHARES TABLES WITH THE FIRST TUNNEL.

;COL 64 OR 0
     	.byte 	$3A,$80,1,14		;ERASE SPACEMAN IF SECOND TUNNEL
 	.byte 	$20,$80,$03,$03	;PUT SPACEMAN IN TUNNEL
     	.byte 	$3A,$80,3,14		;ERASE BAT IF SECOND TUNNEL
     	.byte 	$20,$80,$1A,$00	;BAT
     	.byte 	$3A,$80,5,14		;ERASE THUG IF SECOND TUNNEL
 	.byte 	$20,$80,$00,$06	;PUT THUG IN TUNNEL
     	.byte 	$3A,$80,7,14		;ERASE BAT SECOND TUNNEL
     	.byte 	$20,$00,$1A,$08	;PUT A BAT IN FRONT OF HIM

;COL 72 OR 8
     	.byte 	$3A,$80,9,14		;ERASE HOLE IF SECOND TUNNEL
     	.byte 	$25,$09,14,$20	;HOLE IN GROUND TO SECOND TUNNEL
     	.byte 	$3A,$80,11,14		;ERASE BIRD IF SECOND TUNNEL
     	.byte 	$20,$00,$05,$00	;PUT A BIRD OVER THE HOLE
     	.byte 	$3A,$80,77,7		;ERASE SPIDER IF FIRST TUNNEL
     	.byte 	$20,$00,$2B,$08	;SPIDER
     	.byte 	$3A,$80,15,14		;ERASE HEALTH IF SECOND TUNNEL
     	.byte 	$20,$00,$25,$09	;HEALTH

;COL 80 OR 16
     	.byte 	$3A,$80,81,7		;ERASE SPIDER IF FIRST TUNNEL
     	.byte 	$20,$00,$2B,$0A	;SPIDER
     	.byte 	$3A,$80,19,14		;ERASE SUITCASE IF SECOND TUNNEL
     	.byte 	$20,$00,$24,$09	;SUITCASE
     	.byte 	$00,$00,$00,$00
     	.byte 	$3A,$80,87,7		;ERASE HOLE IF FIRST TUNNEL
     	.byte 	$3A,$80,88,7		;ERASE SPIDER IF FIRST TUNNEL
     	.byte 	$25,$0B,11,$20	;HOLE IN GROUND GOING TO KEY

;COL 88 OR 24
     	.byte 	$20,$00,$2B,$06	;SPIDER
     	.byte 	$00,$00,$00,$00
     	.byte 	$3A,$80,93,7		;ERASE SPIDER IF FIRST TUNNEL
     	.byte 	$20,$80,$1A,$00	;FAST BAT 
     	.byte 	$25,$0B,8,$20	;HOLE IN GROUND TO BAT PIT
     	.byte 	$20,$80,$2B,$02	;SPIDER
     	.byte 	$00,$00,$00,$00
     	.byte 	$00,$00,$00,$00

PITS:

;COL 0
     	.byte 	$00,$00,$00,$00
     	.byte 	$0C,$00,$08,$00	;IF HERO CAN GET HERE, BACK TO BATPIT
     	.byte 	$20,$C0,$1A,$04	;PERMA LAUNCH BATS FOR ALL PITS
     	.byte 	$98,$04,$02,$00	;HIDDEN LIFE FORCE
     	.byte 	$3A,$00,5,$0D
     	.byte 	$20,$00,$24,$06	;SUITCASE IF KEY PIT
     	.byte 	$3A,$00,$07,$0A	;ERASE ORDINARY BUG AT 7
    	.byte 	$20,$80,$29,$14	;ORDINARY BUG IF BUG PIT

;COL 8
     	.byte 	$3A,$80,$09,$0A	;ERASE PUSHER IF BUG PIT
     	.byte 	$20,$80,$02,$0F	;PUSHER ENEMY
     	.byte 	$3A,$00,11,$08
     	.byte 	$20,$00,$1A,$08	;BAT IF BAT PIT
     	.byte 	$3A,$00,13,$0D
     	.byte 	$20,$00,$24,$15	;SUITCASE IF KEY PIT
     	.byte 	$25,$13,$00,$20	;HOLE IN GROUND TO PIT BELOW
     	.byte 	$3A,$80,14,$08	;NO HOLE IN BATPIT

;COL 16
     	.byte 	$25,$07,$09,$20	;HOLE IN MIDDLE BLOCK INSIDE BUG PIT
     	.byte 	$3A,$00,16,$0A	;NO MIDDLE BLOCK HOLE IF NOT BUG PIT
     	.byte 	$3A,$80,14,$0A	;NO HOLE IN BUG PIT
     	.byte 	$3A,$00,20,$08
     	.byte 	$20,$00,$1A,$13	;BAT IF BAT PIT
     	.byte 	$3A,$00,22,$0D
     	.byte 	$20,$80,$06,$0C	;BUG WITH KEY IN IT IF KEY PIT
     	.byte 	$3A,$80,14,$0D	;NO HOLE IN KEY PIT

;COL 24
     	.byte 	$3A,$00,25,$0A	;ERASE ORDINARY BUG AT 25
     	.byte 	$20,$80,$29,$10	;ORDINARY BUG IF BUG PIT
     	.byte 	$3A,$00,27,$08
     	.byte 	$20,$C0,$1A,$04	;PERMA BAT IF BAT PIT
     	.byte 	$97,$0B,$10,$04	;FREE HERO ON CAVE WALL IF KEY PIT
     	.byte 	$3A,$00,28,$0D
     	.byte 	$0C,$00,$09,$00	
     	.byte 	$0C,$00,$09,$00	;EXIT BACK TO WAREHOUSE FOR ALL IF
					;THEY CAN GET TO THIS COLUMN


